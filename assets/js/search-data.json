{
  
    
        "post0": {
            "title": "Segmenting Lungs from Chest X-Rays using ResUnet Architecture (Pytorch+MONAI)",
            "content": "About . Knowledge is not the power, implementation is power. ~ Garrison Wynn. . You have completed a course in Machine Learning and Deep learning, and you are excited to apply your newly earned AI wisdom to the field of Healthcare and Medical images, but the only obstacle is that you don&#39;t know which tools you should use? How should you approach the problem and write the code? And the bigger question How should I move from theory to practice? . If these are your worries, then you are at the right place. This blog is all about giving you the right tools to implement your knowledge and feel powerful. Specifically, in this blog, we will learn how to use the Deep Learning method to classify two-dimensional (2D) Medical images, Chest X-rays into three classes COVID-19, Pneumonia, and Normal. We will be using two awesome python libraries Pytorch and MONAI. We will be learning Pre/Post-processing techniques, Data Augmentation methods. We will also review the concepts of the weighted cross-entropy loss function, learning rate scheduler, AUC-ROC metric, DenseNet, efficientNet, and so on. . Isn&#39;t that exciting? . . Consider this blog more like a tutorial that will help you to get familiar with the tools used to read-open-write medical imaging files. As this blog is written using fastpages, you can run this whole tutorial and associated code as a Jupyter notebook. . Dataset: Chest XR COVID-19 detection Challenge . The Coronavirus disease 2019 (COVID-19) pandemic remains a worldwide concern. In India alone, over 30 million people were infected and more than 400 thousand have lost their lives. Early diagnosis and separation of possibly infectious subjects is a significant step to fight against COVID-19, this can help in immediate treatment and care.he gold standard screening approach for identifying the coronavirus is reverse transcription-polymerase chain reaction (RT-PCR). Other alternative screening methods include the use of computed tomography (CT) and Chest X-rays that can show visual indicators of COVID-19 viral infections and other diseases like Pneumonia. . One of the advantages of these medical imaging methods is that they can help in the detection of the severity of the disease while tests like RT-PCR only indicate the presence of the infection. Medical imaging methods can also be used to identify the recovery status of a patient. . Interpretation of chest X-rays requires an expert physician and with the advent of the COVID-19 pandemic, a practitioner can misclassify the X-Rays easily. Computer-aided methods that are fast and reliable can prove to be effective and help doctors for better understanding and classification. Let us use or knowledge of AI to help radiologist. . What is the challenge? . Chest XR COVID-19 detection Challenge was hosted on grand-challenge.org in year 2021 and the challenge aims to develop a multiclass classification algorithm capable of detecting COVID-19 in Chest X-ray images. The dataset contains 3 image classes: COVID-19, Pneumonia and Normal (healthy). . Getting the Dataset . The dataset is available on google drive. It has a size of 3.4GB. All the CXR are either .jpeg, .jpg, .png files. We can download and extract the dataset using the following code. . !gdown --id 12kvHaeYQVGtdcsaxtsGu8ft-OuY-BKya import zipfile with zipfile.ZipFile(&quot;./CXR_Covid-19_Challenge.zip&quot;, &#39;r&#39;) as zip_ref: zip_ref.extractall(&quot;./&quot;) . Collecting pydicom Downloading pydicom-2.3.0-py3-none-any.whl (2.0 MB) |████████████████████████████████| 2.0 MB 6.4 MB/s eta 0:00:01 Installing collected packages: pydicom Successfully installed pydicom-2.3.0 Collecting gdown Downloading gdown-4.4.0.tar.gz (14 kB) Installing build dependencies ... done Getting requirements to build wheel ... done Preparing wheel metadata ... done Requirement already satisfied: tqdm in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from gdown) (4.63.0) Requirement already satisfied: requests[socks] in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from gdown) (2.27.1) Requirement already satisfied: beautifulsoup4 in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from gdown) (4.11.1) Requirement already satisfied: six in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from gdown) (1.16.0) Collecting filelock Downloading filelock-3.7.1-py3-none-any.whl (10 kB) Requirement already satisfied: soupsieve&gt;1.2 in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from beautifulsoup4-&gt;gdown) (2.3.1) Requirement already satisfied: certifi&gt;=2017.4.17 in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from requests[socks]-&gt;gdown) (2021.10.8) Requirement already satisfied: charset-normalizer~=2.0.0 in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from requests[socks]-&gt;gdown) (2.0.4) Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from requests[socks]-&gt;gdown) (1.26.8) Requirement already satisfied: idna&lt;4,&gt;=2.5 in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from requests[socks]-&gt;gdown) (3.3) Requirement already satisfied: PySocks!=1.5.7,&gt;=1.5.6 in /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages (from requests[socks]-&gt;gdown) (1.7.1) Building wheels for collected packages: gdown Building wheel for gdown (PEP 517) ... done Created wheel for gdown: filename=gdown-4.4.0-py3-none-any.whl size=14759 sha256=5e2984665becc50f013dfc444e54a9d0fcd6734b314ef8e73b91855285f77039 Stored in directory: /home/akansh/.cache/pip/wheels/7d/37/b6/b2a79c75e898c0b8e46ff255102602d7159a10d9af0d80641a Successfully built gdown Installing collected packages: filelock, gdown Successfully installed filelock-3.7.1 gdown-4.4.0 /media/akansh/0C6D08990C6D0899/akansh-env/lib/python3.9/site-packages/gdown/cli.py:127: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don&#39;t need to pass it anymore to use a file ID. warnings.warn( Downloading... From: https://drive.google.com/uc?id=12kvHaeYQVGtdcsaxtsGu8ft-OuY-BKya To: /media/akansh/0C6D08990C6D0899/Data/2d_classification/CXR_Covid-19_Challenge.zip 17%|██████▋ | 616M/3.61G [09:53&lt;47:41, 1.05MB/s] . According to the Wikipedia, they are: . Digital Imaging and Communications in Medicine (DICOM) is the standard for the communication and management of medical imaging information and related data.DICOM is most commonly used for storing and transmitting medical images enabling the integration of medical imaging devices such as scanners, servers, workstations, printers, network hardware, and picture archiving and communication systems (PACS) from multiple manufacturers. It has been widely adopted by hospitals and is making inroads into smaller applications such as dentists&#39; and doctors&#39; offices. . In summary: . Store Medical image data(Body) + Metadata(Header) associated with it. | Used for communication between Medical Imaging devices. | Widely used in Hospital Atmosphere. | . DICOM Structure . How to Read DICOM files? . We will be using Pydicom a python library to read DICOM files. . Lets start with some imports, remember you can run all this code as ipynb notebook on google colab or binder by just clicking &quot;run on colab&quot;, present on top of this page. . Importing: . pydicom: For reading DICOM files. | matplotlib.pyplot: To plot Medical Images. | numpy: For array manipulation. | pathlib: For easy path handling. | . import pydicom import matplotlib.pyplot as plt import numpy as np from pathlib import Path . 2-Dimensional(2D) Data . DICOM files can have multiple extentions like .dicom or .dcm. In our case we have .dcm as an extention. Reading a single file .dcm file using pydicom.read_file(path) function. . path2dicom = &quot;./blog_1_data/ID_0000_AGE_0060_CONTRAST_1_CT(1).dcm&quot; dicom_file = pydicom.read_file(path2dicom) . As discussed in the earlier sections, DICOM files are a combination of medical image data and metadata. To access all the metadata, we can print the DICOM files. Click on Show Output to see the print output. . print(dicom_file) . Dataset.file_meta - (0002, 0000) File Meta Information Group Length UL: 194 (0002, 0001) File Meta Information Version OB: b&#39; x00 x01&#39; (0002, 0002) Media Storage SOP Class UID UI: CT Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.108821836759549281694712274169 (0002, 0010) Transfer Syntax UID UI: Implicit VR Little Endian (0002, 0012) Implementation Class UID UI: 1.2.40.0.13.1.1.1 (0002, 0013) Implementation Version Name SH: &#39;dcm4che-1.4.31&#39; - (0008, 0000) Group Length UL: 430 (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0008) Image Type CS: [&#39;ORIGINAL&#39;, &#39;PRIMARY&#39;, &#39;AXIAL&#39;] (0008, 0016) SOP Class UID UI: CT Image Storage (0008, 0018) SOP Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.108821836759549281694712274169 (0008, 0020) Study Date DA: &#39;19830708&#39; (0008, 0021) Series Date DA: &#39;19830708&#39; (0008, 0022) Acquisition Date DA: &#39;19830708&#39; (0008, 0023) Content Date DA: &#39;19830708&#39; (0008, 0030) Study Time TM: &#39;085723.000000&#39; (0008, 0031) Series Time TM: &#39;090344.332000&#39; (0008, 0032) Acquisition Time TM: &#39;090517.558000&#39; (0008, 0033) Content Time TM: &#39;090501.593000&#39; (0008, 0040) Data Set Type US: 0 (0008, 0041) Data Set Subtype LO: &#39;IMA SPI&#39; (0008, 0050) Accession Number SH: &#39;2819497684894126&#39; (0008, 0060) Modality CS: &#39;CT&#39; (0008, 0070) Manufacturer LO: &#39;SIEMENS&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;&#39; (0008, 1010) Station Name SH: &#39;&#39; (0008, 1090) Manufacturer&#39;s Model Name LO: &#39;SOMATOM PLUS 4&#39; (0008, 2111) Derivation Description ST: &#39;&#39; (0009, 0000) Private Creator UN: b&#39; x86 x00 x00 x00&#39; (0009, 0010) Private tag data LO: &#39;SPI RELEASE 1&#39; (0009, 0012) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0009, 0013) Private tag data LO: &#39;SIEMENS CM VA0 LAB&#39; (0009, 0020) Private tag data LO: &#39;SIEMENS CT VA0 IDE&#39; (0009, 0030) Private tag data LO: &#39;SIEMENS CT VA0 ORI&#39; (0010, 0000) Group Length UL: 70 (0010, 0010) Patient&#39;s Name PN: &#39;TCGA-17-Z034&#39; (0010, 0020) Patient ID LO: &#39;TCGA-17-Z034&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1010) Patient&#39;s Age AS: &#39;060Y&#39; (0011, 0000) Private Creator UN: b&#39;F x00 x00 x00&#39; (0011, 0010) Private tag data LO: &#39;SPI RELEASE 1&#39; (0011, 0011) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0011, 0012) Private tag data LO: &#39;SIEMENS ISI&#39; (0012, 0000) Group Length UL: 758 (0012, 0062) Patient Identity Removed CS: &#39;YES&#39; (0012, 0063) De-identification Method LO: &#39;Per DICOM PS 3.15 AnnexE. Details in 0012,0064&#39; (0012, 0064) De-identification Method Code Sequence 8 item(s) - (0008, 0000) Group Length UL: 76 (0008, 0100) Code Value SH: &#39;113100&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Basic Application Confidentiality Profile&#39; (0008, 0000) Group Length UL: 58 (0008, 0100) Code Value SH: &#39;113101&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Pixel Data Option&#39; (0008, 0000) Group Length UL: 56 (0008, 0100) Code Value SH: &#39;113103&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Graphics Option&#39; (0008, 0000) Group Length UL: 58 (0008, 0100) Code Value SH: &#39;113105&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Descriptors Option&#39; (0008, 0000) Group Length UL: 80 (0008, 0100) Code Value SH: &#39;113107&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Longitudinal With Modified Dates Option&#39; (0008, 0000) Group Length UL: 72 (0008, 0100) Code Value SH: &#39;113108&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Patient Characteristics Option&#39; (0008, 0000) Group Length UL: 64 (0008, 0100) Code Value SH: &#39;113109&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Device Identity Option&#39; (0008, 0000) Group Length UL: 60 (0008, 0100) Code Value SH: &#39;113111&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Safe Private Option&#39; (0013, 0000) Private Creator UN: b&#39;. x00 x00 x00&#39; (0013, 0010) Private tag data LO: &#39;CTP&#39; (0013, 1010) Private tag data UN: b&#39;TCGA-LUAD x00&#39; (0013, 1013) Private tag data UN: b&#39;77779002&#39; (0018, 0000) Group Length UL: 342 (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; (0018, 0020) Scanning Sequence CS: &#39;RM&#39; (0018, 0050) Slice Thickness DS: &#39;8.0&#39; (0018, 0060) KVP DS: &#39;140.0&#39; (0018, 0090) Data Collection Diameter DS: &#39;500.0&#39; (0018, 1000) Device Serial Number LO: &#39; 20643&#39; (0018, 1020) Software Versions LO: &#39;VB40W&#39; (0018, 1110) Distance Source to Detector DS: &#39;1005.0&#39; (0018, 1111) Distance Source to Patient DS: &#39;570.0&#39; (0018, 1120) Gantry/Detector Tilt DS: &#39;0.0&#39; (0018, 1130) Table Height DS: &#39;170.0&#39; (0018, 1140) Rotation Direction CS: &#39;CW&#39; (0018, 1150) Exposure Time IS: &#39;750&#39; (0018, 1151) X-Ray Tube Current IS: &#39;206&#39; (0018, 1152) Exposure IS: &#39;155&#39; (0018, 1170) Generator Power IS: &#39;29&#39; (0018, 1190) Focal Spot(s) DS: &#39;1.2&#39; (0018, 1200) Date of Last Calibration DA: &#39;19830623&#39; (0018, 1201) Time of Last Calibration TM: &#39;214703.931000&#39; (0018, 1210) Convolution Kernel SH: &#39;59 .10.AB50&#39; (0018, 5100) Patient Position CS: &#39;HFS&#39; (0019, 0000) Private Creator UN: b&#39; xf4 x00 x00 x00&#39; (0019, 0010) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0019, 0011) Private tag data LO: &#39;SIEMENS CT VA0 GEN&#39; (0019, 0013) Private tag data LO: &#39;SIEMENS CT VA0 COAD&#39; (0019, 0015) Private tag data LO: &#39;SIEMENS CM VA0 ACQU&#39; (0019, 1392) [Osteo Regression Line Slope] DS: &#39;0.979&#39; (0019, 1393) [Osteo Regression Line Intercept] DS: &#39;-1.42&#39; (0019, 13b0) [Feed per Rotation] DS: &#39;8.0&#39; (0019, 13c0) [Pulmo Water] DS: &#39;2.154907&#39; (0019, 13c1) [Pulmo Air] DS: &#39;-992.9709&#39; (0019, 13c3) [Pulmo Time] TM: &#39;201523.000000&#39; (0020, 0000) Group Length UL: 566 (0020, 000d) Study Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.292315456232117737481743327260 (0020, 000e) Series Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.531955806841803044139009743992 (0020, 0010) Study ID SH: &#39;&#39; (0020, 0011) Series Number IS: &#39;5&#39; (0020, 0012) Acquisition Number IS: &#39;3&#39; (0020, 0013) Instance Number IS: &#39;25&#39; (0020, 0030) Image Position DS: [-02.166094E+02, -2.086094E+02, -2.475000E+02] (0020, 0032) Image Position (Patient) DS: [-217, -209, -247.5] (0020, 0035) Image Orientation DS: [001.000000E+00, 00.000000E+00, 00.000000E+00, 00.000000E+00, 01.000000E+00, 00.000000E+00] (0020, 0037) Image Orientation (Patient) DS: [1, 0, 0, 0, 1, 0] (0020, 0050) Location DS: &#39;-247.5&#39; (0020, 0052) Frame of Reference UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.299172824841582204484171666104 (0020, 0070) Image Geometry Type LO: &#39;PLANAR&#39; (0020, 0080) Masking Image CS: &#39;&#39; (0020, 1040) Position Reference Indicator LO: &#39;&#39; (0020, 1041) Slice Location DS: &#39;-247.5&#39; (0020, 3100) Source Image IDs CS: &#39;&#39; (0020, 3402) Modified Image ID CS: &#39;&#39; (0020, 3403) Modified Image Date DA: &#39;&#39; (0020, 3405) Modified Image Time TM: &#39;&#39; (0020, 5000) Original Image Identification AT: None (0020, 5002) Original Image Identification Nomen LO: &#39;&#39; (0021, 0000) Private Creator UN: b&#39;h x00 x00 x00&#39; (0021, 0010) Private tag data LO: &#39;SIEMENS MED&#39; (0021, 0012) Private tag data LO: &#39;SIEMENS CT VA0 GEN&#39; (0021, 0022) Private tag data LO: &#39;SIEMENS CT VA0 RAW&#39; (0021, 0030) Private tag data LO: &#39;SIEMENS CT VA0 ORMR&#39; (0028, 0000) Group Length UL: 290 (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0005) Image Dimensions US: 2 (0028, 0010) Rows US: 512 (0028, 0011) Columns US: 512 (0028, 0030) Pixel Spacing DS: [007.812500e-01, 007.812500e-01] (0028, 0040) Image Format CS: &#39;RECT&#39; (0028, 0050) Manipulated Image LO: &#39;&#39; (0028, 0060) Compression Code CS: &#39;NONE&#39; (0028, 0100) Bits Allocated US: 16 (0028, 0101) Bits Stored US: 12 (0028, 0102) High Bit US: 11 (0028, 0103) Pixel Representation US: 0 (0028, 0200) Image Location US: 32736 (0028, 0301) Burned In Annotation CS: &#39;NO&#39; (0028, 0303) Longitudinal Temporal Information M CS: &#39;MODIFIED&#39; (0028, 1050) Window Center DS: [000010, -0550] (0028, 1051) Window Width DS: [000400, 01800] (0028, 1052) Rescale Intercept DS: &#39;-1024.0&#39; (0028, 1053) Rescale Slope DS: &#39;1.0&#39; (0029, 0000) Private Creator UN: b&#39;N x00 x00 x00&#39; (0029, 0010) Private tag data LO: &#39;SIEMENS MED DISPLAY&#39; (0029, 0011) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0029, 0030) Private tag data LO: &#39;SIEMENS MED MG&#39; (0031, 0000) Private Creator UN: b&#39; x14 x00 x00 x00&#39; (0031, 0012) Private tag data LO: &#39;SIEMENS ISI&#39; (0032, 0000) Group Length UL: 8 (0032, 4000) Study Comments LT: &#39;&#39; (0040, 0000) Group Length UL: 8 (0040, 1003) Requested Procedure Priority SH: &#39;&#39; (0091, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0091, 0010) Private tag data LO: &#39;SIENET&#39; (0095, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0095, 0010) Private tag data LO: &#39;SIENET&#39; (0097, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0097, 0010) Private tag data LO: &#39;SIENET&#39; (0099, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0099, 0010) Private tag data LO: &#39;SIENET&#39; (7003, 0000) Private Creator UN: b&#39; x14 x00 x00 x00&#39; (7003, 0010) Private tag data LO: &#39;SIEMENS MED&#39; (7fe0, 0000) Group Length UL: 524296 (7fe0, 0010) Pixel Data OW: Array of 524288 elements . . I know that is a hell lot of metadata. Each entry is accessible by its unique Data Tag. Data tags use hexadecimal encoded identifiers. As an example: . . We can call out different using the following code: . Note: The 0x in front of the identifier tells the python code to treat the data tag values as hexadecimal. . print(dicom_file[0x0028, 0x0100]) print(dicom_file[0x0028, 0x0010]) print(dicom_file[0x0018, 0x0015]) . (0028, 0100) Bits Allocated US: 16 (0028, 0010) Rows US: 512 (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; . . There is also an alternative method or one can say more direct way to access various metadata values from your DICOM file. To do so we can treat the loaded DICOM file as an object and can access the metadata values as variables. See the example below: . Please note the lettering:&#39;Body Part Examined&#39; becomes &#39;BodyPartExamined&#39; (so-called Pascal Case). . print(&quot;Bits Allocated:&quot; ,dicom_file.BitsAllocated) print(&quot;Rows:&quot; ,dicom_file.Rows) print(&quot;Body Part Examined:&quot;, dicom_file.BodyPartExamined) . Bits Allocated: 16 Rows: 512 Body Part Examined: CHEST . . After going through the metadata lets access the actual(image) data from the dicom file. This is done using the pixel_array. . This image data is numpy array. We can print its type and size. . ct_image_data = dicom_file.pixel_array print(&quot;Type of CT Image data:&quot;, type(ct_image_data)) print(&quot;Size of CT Image data:&quot;, ct_image_data.shape) . Type of CT Image data: &lt;class &#39;numpy.ndarray&#39;&gt; Size of CT Image data: (512, 512) . Let&#39;s plot the image using Matplotlib.pyplot to have a visual inspection of the CT image data. . 3-Dimensional(3D) Data . In the previous section, we learned how to read the DICOM file. Essentially we read a slice of a CT scan. Usually CT scans and MRI are 3D data, their shape is of (HxWxD) format. In this section, we will take learn how to read and understand 3D data stored as multiple 2D DICOM files. . We will use Path function form pathlib to define the path of the Dicom folder. Then we will use glob function with (&quot;*&quot;) to list all the files present inside the folder. . path2dicom = Path(&quot;./blog_1_data/SE000001/&quot;) all_files = list(path2dicom.glob(&quot;*&quot;)) all_files . [PosixPath(&#39;blog_1_data/SE000001/MR000019&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000013&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000018&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000002&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000010&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000017&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000005&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000026&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000020&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000014&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000025&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000007&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000003&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000023&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000006&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000008&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000022&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000012&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000001&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000024&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000015&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000016&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000000&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000011&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000009&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000004&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000021&#39;)] . . Lets read one slice of the MRI usinf read_file function. and print the metadata. . one_mri_slice = pydicom.read_file(all_files[14]) print(one_mri_slice) . Dataset.file_meta - (0002, 0000) File Meta Information Group Length UL: 214 (0002, 0001) File Meta Information Version OB: b&#39; x00 x01&#39; (0002, 0002) Media Storage SOP Class UID UI: MR Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0002, 0010) Transfer Syntax UID UI: Explicit VR Little Endian (0002, 0012) Implementation Class UID UI: 1.2.840.114089.1.0.0.3.3.38 (0002, 0013) Implementation Version Name SH: &#39;DCF 3.3.38c&#39; (0002, 0016) Source Application Entity Title AE: &#39;DCF&#39; - (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0008) Image Type CS: [&#39;ORIGINAL&#39;, &#39;PRIMARY&#39;, &#39;M_SE&#39;, &#39;M&#39;, &#39;SE&#39;] (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 0016) SOP Class UID UI: MR Image Storage (0008, 0018) SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0008, 0020) Study Date DA: &#39;20150114&#39; (0008, 0021) Series Date DA: &#39;20150114&#39; (0008, 0022) Acquisition Date DA: &#39;20150114&#39; (0008, 0023) Content Date DA: &#39;20150114&#39; (0008, 0030) Study Time TM: &#39;132242&#39; (0008, 0031) Series Time TM: &#39;132628.00000&#39; (0008, 0032) Acquisition Time TM: &#39;132628.00&#39; (0008, 0033) Content Time TM: &#39;132628.00&#39; (0008, 0050) Accession Number SH: &#39;RJN78893652&#39; (0008, 0060) Modality CS: &#39;MR&#39; (0008, 0070) Manufacturer LO: &#39;Philips Medical Systems&#39; (0008, 0080) Institution Name LO: &#39;Macclesfield&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;WHITTINGHAM VM^-&#39; (0008, 1010) Station Name SH: &#39;PMSN-X6FNOVG0RR&#39; (0008, 1030) Study Description LO: &#39;MRI Head&#39; (0008, 1032) Procedure Code Sequence 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 103e) Series Description LO: &#39;T2W_TSE&#39; (0008, 1040) Institutional Department Name LO: &#39;MRI&#39; (0008, 1070) Operators&#39; Name PN: &#39;&#39; (0008, 1080) Admitting Diagnoses Description LO: &#39;&#39; (0008, 1090) Manufacturer&#39;s Model Name LO: &#39;Achieva&#39; (0008, 1111) Referenced Performed Procedure Step Sequence 1 item(s) - (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 1150) Referenced SOP Class UID UI: Modality Performed Procedure Step SOP Class (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.6788.2015011413224231041 (0020, 0013) Instance Number IS: &#39;0&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1406) [Unknown] SS: 0 (0008, 1140) Referenced Image Sequence 3 item(s) - (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255028693 (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255023690 (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255025691 (0009, 0000) Private Creator UL: 14 (0009, 0010) Private tag data LO: &#39;GEIIS&#39; (0010, 0010) Patient&#39;s Name PN: &#39;LIONHEART^WILLIAM&#39; (0010, 0020) Patient ID LO: &#39;RJN7270540X&#39; (0010, 0021) Issuer of Patient ID LO: &#39;RJN&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;19620726&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1000) Other Patient IDs LO: &#39;4824124506&#39; (0010, 1030) Patient&#39;s Weight DS: &#39;82.0&#39; (0010, 1040) Patient&#39;s Address LO: &#39;MARSHAM, START LANE, WHALEY BRIDGE, SK23 7BP&#39; (0010, 21c0) Pregnancy Status US: 4 (0018, 0015) Body Part Examined CS: &#39;HEAD&#39; (0018, 0020) Scanning Sequence CS: &#39;SE&#39; (0018, 0021) Sequence Variant CS: &#39;SK&#39; (0018, 0022) Scan Options CS: &#39;&#39; (0018, 0023) MR Acquisition Type CS: &#39;&#39; (0018, 0024) Sequence Name SH: &#39;&#39; (0018, 0050) Slice Thickness DS: &#39;5.0&#39; (0018, 0080) Repetition Time DS: &#39;3136.03076171875&#39; (0018, 0081) Echo Time DS: &#39;110.0&#39; (0018, 0083) Number of Averages DS: &#39;1.0&#39; (0018, 0084) Imaging Frequency DS: &#39;63.895818&#39; (0018, 0085) Imaged Nucleus SH: &#39;1H&#39; (0018, 0086) Echo Number(s) IS: &#39;1&#39; (0018, 0087) Magnetic Field Strength DS: &#39;1.5&#39; (0018, 0088) Spacing Between Slices DS: &#39;6.0&#39; (0018, 0089) Number of Phase Encoding Steps IS: &#39;173&#39; (0018, 0091) Echo Train Length IS: &#39;23&#39; (0018, 0093) Percent Sampling DS: &#39;75.0&#39; (0018, 0094) Percent Phase Field of View DS: &#39;79.6875&#39; (0018, 1000) Device Serial Number LO: &#39;12098&#39; (0018, 1020) Software Versions LO: [&#39;1.5.4&#39;, &#39;1.5.4.9&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;] (0018, 1030) Protocol Name LO: &#39;T2W_TSE&#39; (0018, 1081) Low R-R Value IS: &#39;0&#39; (0018, 1082) High R-R Value IS: &#39;0&#39; (0018, 1083) Intervals Acquired IS: &#39;0&#39; (0018, 1084) Intervals Rejected IS: &#39;0&#39; (0018, 1088) Heart Rate IS: &#39;0&#39; (0018, 1100) Reconstruction Diameter DS: &#39;240.0&#39; (0018, 1250) Receive Coil Name SH: &#39;Head&#39; (0018, 1251) Transmit Coil Name SH: &#39;B&#39; (0018, 1310) Acquisition Matrix US: [0, 256, 173, 0] (0018, 1312) In-plane Phase Encoding Direction CS: &#39;ROW&#39; (0018, 1314) Flip Angle DS: &#39;90.0&#39; (0018, 5100) Patient Position CS: &#39;HFS&#39; (0020, 000d) Study Instance UID UI: 1.2.840.113619.2.243.6074146108103184.41976.4343.2084088 (0020, 000e) Series Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413262801702 (0020, 0010) Study ID SH: &#39;474297762&#39; (0020, 0011) Series Number IS: &#39;201&#39; (0020, 0012) Acquisition Number IS: &#39;2&#39; (0020, 0013) Instance Number IS: &#39;7&#39; (0020, 0032) Image Position (Patient) DS: [-123.82818938791, -134.32321047782, -13.624799072742] (0020, 0037) Image Orientation (Patient) DS: [0.99935883283615, -0.0323828160762, 0.01527170091867, 0.03418818861246, 0.98977828025817, -0.1384561806917] (0020, 0052) Frame of Reference UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.5544.2015011413251448000 (0020, 0100) Temporal Position Identifier IS: &#39;1&#39; (0020, 0105) Number of Temporal Positions IS: &#39;1&#39; (0020, 1040) Position Reference Indicator LO: &#39;&#39; (0020, 1041) Slice Location DS: &#39;35.9999959546749&#39; (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0010) Rows US: 256 (0028, 0011) Columns US: 256 (0028, 0030) Pixel Spacing DS: [0.9375, 0.9375] (0028, 0034) Pixel Aspect Ratio IS: [1, 1] (0028, 0100) Bits Allocated US: 16 (0028, 0101) Bits Stored US: 12 (0028, 0102) High Bit US: 11 (0028, 0103) Pixel Representation US: 0 (0028, 1050) Window Center DS: &#39;308.513876454789&#39; (0028, 1051) Window Width DS: &#39;536.374216651745&#39; (0028, 2110) Lossy Image Compression CS: &#39;00&#39; (0032, 1032) Requesting Physician PN: &#39;WHITTINGHAM VM^-&#39; (0032, 1033) Requesting Service LO: &#39;Unspecified&#39; (0032, 1060) Requested Procedure Description LO: &#39;MRI Head&#39; (0040, 0241) Performed Station AE Title AE: &#39;RJN71PHMR01&#39; (0040, 0244) Performed Procedure Step Start Date DA: &#39;20150114&#39; (0040, 0245) Performed Procedure Step Start Time TM: &#39;132242&#39; (0040, 0250) Performed Procedure Step End Date DA: &#39;20150114&#39; (0040, 0251) Performed Procedure Step End Time TM: &#39;132242&#39; (0040, 0253) Performed Procedure Step ID SH: &#39;474297762&#39; (0040, 0254) Performed Procedure Step Descriptio LO: &#39;MRI Head&#39; (0040, 0260) Performed Protocol Code Sequence 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 010b) Context Group Extension Flag CS: &#39;N&#39; (0040, 0275) Request Attributes Sequence 1 item(s) - (0040, 1001) Requested Procedure ID SH: &#39;RJN78893652&#39; (0040, 0321) Film Consumption Sequence 0 item(s) - (0040, 2017) Filler Order Number / Imaging Servi LO: &#39;77706562&#39; (0903, 0010) Private Creator LO: &#39;GEIIS PACS&#39; (0903, 1010) [Reject Image Flag] US: 0 (0903, 1011) [Significant Flag] US: 0 (0903, 1012) [Confidential Flag] US: 0 (0905, 0010) Private Creator LO: &#39;GEIIS&#39; (0905, 1030) [Assigning Authority For Patient ID LO: &#39;RJN&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 0090) Private Creator LO: &#39;Philips Imaging DD 129&#39; (2001, 1001) [Chemical Shift] FL: 0.0 (2001, 1002) [Chemical Shift Number MR] IS: &#39;0&#39; (2001, 1003) [Diffusion B-Factor] FL: 0.0 (2001, 1006) [Image Enhanced] CS: &#39;N&#39; (2001, 1007) [Image Type ED ES] CS: &#39;U&#39; (2001, 1008) [Phase Number] IS: &#39;1&#39; (2001, 1009) [Unknown] FL: 0.0 (2001, 100a) [Slice Number MR] IS: &#39;7&#39; (2001, 100b) [Slice Orientation] CS: &#39;TRANSVERSAL&#39; (2001, 100c) [Unknown] CS: &#39;N&#39; (2001, 100e) [Unknown] CS: &#39;N&#39; (2001, 100f) [Unknown] SS: 0 (2001, 1010) [Cardiac Sync] CS: &#39;NO&#39; (2001, 1011) [Diffusion Echo Time] FL: 0.0 (2001, 1012) [Dynamic Series] CS: &#39;N&#39; (2001, 1013) [EPI Factor] SL: 1 (2001, 1014) [Number of Echoes] SL: 1 (2001, 1015) [Number of Locations] SS: 1 (2001, 1016) [Number of PC Directions] SS: 0 (2001, 1017) [Number of Phases MR] SL: 1 (2001, 1018) [Number of Slices MR] SL: 27 (2001, 1019) [Partial Matrix Scanned] CS: &#39;N&#39; (2001, 101a) [PC Velocity] FL: [0.0, 0.0, 0.0] (2001, 101b) [Prepulse Delay] FL: 0.0 (2001, 101c) [Prepulse Type] CS: &#39;NO&#39; (2001, 101d) [Reconstruction Number MR] IS: &#39;1&#39; (2001, 101f) [Respiration Sync] CS: &#39;NO&#39; (2001, 1020) [Scanning Technique Description MR] LO: &#39;TSE&#39; (2001, 1021) [SPIR] CS: &#39;N&#39; (2001, 1022) [Water Fat Shift] FL: 1.3013890981674194 (2001, 1023) [Flip Angle Philips] DS: &#39;90.0&#39; (2001, 1024) [Interactive] CS: &#39;N&#39; (2001, 1025) [Echo Time Display MR] SH: &#39;110&#39; (2001, 105f) Private tag data 1 item(s) - (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 102d) [Number of Stack Slices] SS: 27 (2001, 1032) [Stack Radial Angle] FL: 0.0 (2001, 1033) [Stack Radial Axis] CS: &#39;AP&#39; (2001, 1035) [Stack Slice Number] SS: 1 (2001, 1036) [Stack Type] CS: &#39;PARALLEL&#39; (2005, 0010) Private Creator LO: &#39;Philips MR Imaging DD 001&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 1071) [Unknown] FL: -0.6091800332069397 (2005, 1072) [Unknown] FL: -1.9593315124511719 (2005, 1073) [Unknown] FL: -7.9840474128723145 (2005, 1074) [Unknown] FL: 240.0 (2005, 1075) [Unknown] FL: 161.0 (2005, 1076) [Unknown] FL: 191.25 (2005, 1078) [Unknown] FL: -13.602395057678223 (2005, 1079) [Unknown] FL: 13.183597564697266 (2005, 107a) [Unknown] FL: -0.24909068644046783 (2005, 107b) [Unknown] CS: &#39;RL&#39; (2005, 107e) [Unknown] FL: 6.0 (2005, 1081) [Unknown] CS: &#39;FH&#39; (2005, 10a3) [Unknown] IS: &#39;7&#39; (2005, 10a4) [Unknown] IS: &#39;0&#39; (2005, 10a5) [Unknown] IS: &#39;0&#39; (2005, 10a6) [Unknown] IS: &#39;1&#39; (2005, 10a7) [Unknown] CS: &#39;DEFAULT&#39; (2005, 1390) [Unknown] CS: &#39;R_A&#39; (2001, 1060) [Number of Stacks] SL: 1 (2001, 1061) [Unknown] CS: &#39;N&#39; (2001, 1062) [Unknown] CS: &#39;N&#39; (2001, 1063) [Examination Source] CS: &#39;ELSEWHERE&#39; (2001, 106e) [Series Type] SH: &#39;MRSERIES&#39; (2001, 107b) [Acquisition Number] IS: &#39;2&#39; (2001, 1081) [Number of Dynamic Scans] IS: &#39;1&#39; (2001, 1082) [Echo Train Length] IS: &#39;0&#39; (2001, 1083) [Imaging Frequency] DS: &#39;63.895818&#39; (2001, 1084) [Inversion Time] DS: &#39;0.0&#39; (2001, 1085) [Magnetic Field Strength] DS: &#39;1.5&#39; (2001, 1086) [Unknown] IS: &#39;0&#39; (2001, 1087) [Imaged Nucleus] SH: &#39;1H&#39; (2001, 1088) [Number of Averages] DS: &#39;1.0&#39; (2001, 1089) [Phase FOV Percent] DS: &#39;0.0&#39; (2001, 108a) [Sampling Percent] DS: &#39;0.0&#39; (2001, 108b) [Unknown] SH: &#39;B&#39; (2001, 10c8) Private tag data LO: &#39;*FAST BRAIN&#39; (2001, 9000) Private tag data 1 item(s) - (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 0016) SOP Class UID UI: Grayscale Softcopy Presentation State Storage (0008, 0018) SOP Instance UID UI: 1.3.46.670589.11.0.0.51.4.3.0.12098.1.3104.1421242179546 (0008, 1115) Referenced Series Sequence 1 item(s) - (0008, 1140) Referenced Image Sequence 1 item(s) - (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0020, 000e) Series Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413262801702 (0018, 1622) Shutter Presentation Value US: 0 (0020, 0013) Instance Number IS: &#39;1&#39; (0028, 3002) LUT Descriptor US: [0, 0, 0] (0028, 3003) LUT Explanation LO: &#39;&#39; (0028, 3006) LUT Data US: 0 (0028, 3110) Softcopy VOI LUT Sequence 1 item(s) - (0028, 1050) Window Center DS: &#39;1094.0&#39; (0028, 1051) Window Width DS: &#39;1902.0&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 1053) [Window Invert] CS: &#39;N&#39; (2001, 1077) [GL TrafoType] CS: &#39;LINEARVOI&#39; (0070, 005a) Displayed Area Selection Sequence 1 item(s) - (0070, 0052) Displayed Area Top Left Hand Corner SL: [1, 1] (0070, 0053) Displayed Area Bottom Right Hand Co SL: [256, 256] (0070, 0100) Presentation Size Mode CS: &#39;SCALE TO FIT&#39; (0070, 0102) Presentation Pixel Aspect Ratio IS: [1, 1] (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 103f) [Interpolation Method] CS: &#39;BI_CUBIC&#39; (0070, 0080) Content Label CS: &#39;AS LAST SEEN&#39; (0070, 0081) Content Description LO: &#39;&#39; (0070, 0082) Presentation Creation Date DA: &#39;20150114&#39; (0070, 0083) Presentation Creation Time TM: &#39;132727&#39; (0070, 0084) Content Creator&#39;s Name PN: &#39;Achieva&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 0090) Private Creator LO: &#39;Philips Imaging DD 129&#39; (2001, 1026) [Presentation State Subtraction Act CS: &#39;N&#39; (2001, 1067) [Unknown] CS: &#39;&#39; (2001, 1068) Private tag data 1 item(s) - (0028, 1052) Rescale Intercept DS: &#39;0.0&#39; (0028, 1053) Rescale Slope DS: &#39;3.54603174603175&#39; (0028, 1054) Rescale Type LO: &#39;normalized&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 1077) [GL TrafoType] CS: &#39;LINEARMODALITY&#39; (2001, 1077) [GL TrafoType] CS: &#39;L_PRESENTATION&#39; (2001, 109f) [Pixel Processing Kernel Size] US: [0, 0] (2001, 9000) Private tag data 0 item(s) - (2005, 0012) Private Creator LO: &#39;Philips MR Imaging DD 003&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1234) [Unknown] SL: 0 (2005, 1257) [Unknown] SS: 0 (2005, 1281) [Unknown] UI: &#39;&#39; (2005, 1282) [Unknown] CS: &#39;&#39; (2005, 1389) Private tag data 0 item(s) - (2005, 1406) [Unknown] SS: 0 (2050, 0020) Presentation LUT Shape CS: &#39;IDENTITY&#39; (2005, 0010) Private Creator LO: &#39;Philips MR Imaging DD 001&#39; (2005, 0011) Private Creator LO: &#39;Philips MR Imaging DD 002&#39; (2005, 0012) Private Creator LO: &#39;Philips MR Imaging DD 003&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1000) [Unknown] FL: -0.6091800332069397 (2005, 1001) [Unknown] FL: -1.9593315124511719 (2005, 1002) [Unknown] FL: -7.984046936035156 (2005, 1004) [Unknown] CS: &#39;NONE&#39; (2005, 1008) [Unknown] FL: -19.435754776000977 (2005, 1009) [Unknown] FL: -28.406936645507812 (2005, 100a) [Unknown] FL: 0.19745318591594696 (2005, 100b) [Unknown] FL: 79173.09375 (2005, 100c) [Unknown] FL: 5.142798900604248 (2005, 100d) [Unknown] FL: 0.0 (2005, 100e) [Unknown] FL: 0.009394234046339989 (2005, 100f) [Window Center] DS: &#39;1094.0&#39; (2005, 1010) [Window Width] DS: &#39;1902.0&#39; (2005, 1011) [Unknown] CS: &#39;M&#39; (2005, 1012) [Unknown] CS: &#39;N&#39; (2005, 1013) [Unknown] CS: &#39;NO&#39; (2005, 1014) [Unknown] CS: &#39;N&#39; (2005, 1015) [Unknown] CS: &#39;N&#39; (2005, 1016) [Unknown] CS: &#39;N&#39; (2005, 1017) [Unknown] CS: &#39;N&#39; (2005, 1019) [Unknown] CS: &#39;N&#39; (2005, 101a) [Unknown] SS: 0 (2005, 101b) [Unknown] CS: &#39;N&#39; (2005, 101c) [Unknown] CS: &#39;N&#39; (2005, 101d) [Unknown] SS: 256 (2005, 101e) [Unknown] SH: &#39;compose&#39; (2005, 101f) [Unknown] SH: &#39;compose&#39; (2005, 1020) [Number of Chemical Shift] SL: 0 (2005, 1021) [Unknown] SS: 1 (2005, 1022) [Unknown] IS: &#39;0&#39; (2005, 1023) [Unknown] SS: 0 (2005, 1025) [Unknown] SS: 0 (2005, 1026) [Unknown] CS: &#39;N&#39; (2005, 1027) [Unknown] CS: &#39;MINIMUM&#39; (2005, 1028) [Unknown] CS: &#39;N&#39; (2005, 1029) [Unknown] CS: &#39;N&#39; (2005, 102a) [Unknown] IS: &#39;486048324&#39; (2005, 102b) [Unknown] SS: 100 (2005, 102c) [Unknown] CS: &#39;N&#39; (2005, 102d) [Unknown] IS: &#39;0&#39; (2005, 102e) [Unknown] CS: &#39;N&#39; (2005, 102f) [Unknown] CS: &#39;N&#39; (2005, 1030) [Repetition Time] FL: 3136.03076171875 (2005, 1031) [Unknown] CS: &#39;N&#39; (2005, 1033) [Acquisition Duration] FL: 43.9044303894043 (2005, 1034) [Unknown] CS: &#39;Y&#39; (2005, 1035) [Unknown] CS: &#39;PIXEL&#39; (2005, 1036) [Unknown] CS: &#39;N&#39; (2005, 1037) [Unknown] CS: &#39;N&#39; (2005, 1038) [Unknown] CS: &#39;N&#39; (2005, 1039) [Unknown] CS: &#39;N&#39; (2005, 103b) [Unknown] CS: &#39;N&#39; (2005, 103c) [Unknown] CS: &#39;N&#39; (2005, 103d) [Unknown] SS: 102 (2005, 103e) [Unknown] SL: Array of 102 elements (2005, 105f) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1060) [Unknown] IS: &#39;-1&#39; (2005, 1061) [Unknown] CS: &#39;NO&#39; (2005, 1063) [Unknown] SS: 0 (2005, 106e) [Unknown] CS: &#39;SE&#39; (2005, 106f) [Unknown] CS: &#39;MS&#39; (2005, 1080) Private tag data 0 item(s) - (2005, 1083) Private tag data 0 item(s) - (2005, 1084) Private tag data 0 item(s) - (2005, 1085) Private tag data 0 item(s) - (2005, 1086) [Unknown] SS: 0 (2005, 109e) Private tag data 0 item(s) - (2005, 10a0) [Unknown] FL: 0.0 (2005, 10a2) [Unknown] CS: &#39;N&#39; (2005, 10a8) [Unknown] DS: &#39;0.0&#39; (2005, 10a9) [Unknown] CS: &#39;NONE&#39; (2005, 10b0) [Diffusion Direction RL] FL: 0.0 (2005, 10b1) [Diffusion Direction AP] FL: 0.0 (2005, 10b2) [Diffusion Direction FH] FL: 0.0 (2005, 10c0) [Unknown] CS: &#39;SE&#39; (2005, 1199) [Unknown] UL: 1 (2005, 1200) [Unknown] UL: 1 (2005, 1201) [Unknown] UL: 0 (2005, 1213) [Unknown] UL: 1 (2005, 1245) [Unknown] SS: 2 (2005, 1249) [Unknown] SS: 0 (2005, 1251) [Unknown] SS: 0 (2005, 1252) [Unknown] SS: 1 (2005, 1253) [Unknown] SS: 1 (2005, 1325) [Unknown] CS: &#39;N&#39; (2005, 1326) [Unknown] FL: 0.0 (2005, 1327) [Unknown] CS: &#39;REAL&#39; (2005, 1328) [Unknown] CS: &#39;ORIGINAL&#39; (2005, 1329) [Unknown] FL: 50.0 (2005, 1330) [Unknown] CS: [&#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;] (2005, 1331) [Unknown] SS: 0 (2005, 1333) [Unknown] FL: [0.0, 0.0, 0.0] (2005, 1334) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1335) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1336) [Unknown] FL: 0.0 (2005, 1337) [Unknown] FL: 0.0 (2005, 1338) [Unknown] FL: 0.0 (2005, 1339) [Unknown] SS: [0, 0] (2005, 1340) [Unknown] CS: &#39;PRE_FT&#39; (2005, 1341) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1342) [Unknown] CS: &#39;FID&#39; (2005, 1343) [Unknown] CS: &#39;Y&#39; (2005, 1344) [Unknown] SS: Array of 40 elements (2005, 1345) [Unknown] CS: &#39;NO&#39; (2005, 1346) [Unknown] CS: &#39;HERTZ&#39; (2005, 1347) [Unknown] FL: 0.0 (2005, 1348) [Unknown] CS: &#39;OFF&#39; (2005, 1349) [Unknown] FL: 0.0 (2005, 1350) [Unknown] FL: [0.0, 0.0] (2005, 1351) [Unknown] SS: 0 (2005, 1352) [Unknown] SS: 0 (2005, 1355) [Unknown] FL: Array of 30 elements (2005, 1356) [Unknown] CS: &#39;NO&#39; (2005, 1357) [Unknown] SS: 0 (2005, 1359) [Unknown] FL: 1.0 (2005, 1360) [Unknown] FL: 0.0 (2005, 1361) [Unknown] FL: [0.0, 0.0] (2005, 1362) [Unknown] FL: 0.0 (2005, 1363) [Unknown] FL: 0.0 (2005, 1364) [Unknown] CS: &#39;NO&#39; (2005, 1370) [Unknown] SS: 0 (2005, 1371) Private tag data 0 item(s) - (2005, 1381) [Unknown] IS: &#39;3&#39; (2005, 1382) [Unknown] UL: 1 (2005, 1391) [Unknown] PN: &#39;&#39; (2005, 1392) [Unknown] IS: &#39;0&#39; (2005, 1393) [Unknown] IS: &#39;-1&#39; (2005, 1396) [Unknown] CS: &#39;NO&#39; (2005, 1397) [Unknown] LO: &#39;SNM3.T-D1100.Head&#39; (2005, 1398) [Unknown] CS: &#39;NO&#39; (2005, 1399) [Unknown] CS: &#39;NO&#39; (2005, 1400) [Unknown] CS: &#39;YES&#39; (2005, 1401) [Unknown] UL: 1 (2005, 1402) Private tag data 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0103) Coding Scheme Version SH: &#39;&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 010b) Context Group Extension Flag CS: &#39;N&#39; (0008, 010d) Context Group Extension Creator UID UI: &#39;&#39; (2005, 1403) [Unknown] UL: 1 (2005, 1406) [Unknown] SS: 0 (2005, 1409) [Unknown] DS: &#39;0.0&#39; (2005, 140a) [Unknown] DS: &#39;3.54603174603174&#39; (2005, 140b) [Unknown] LO: &#39;normalized&#39; (2050, 0020) Presentation LUT Shape CS: &#39;IDENTITY&#39; (3109, 0010) Private Creator LO: &#39;Applicare/RadWorks/Version 5.0&#39; (3109, 0011) Private Creator LO: &#39;Applicare/RadWorks/Version 6.0/Summary&#39; (3109, 1002) [NEW/SEEN Status] SH: &#39;NEW&#39; (3109, 1008) [Receive Origin] LO: &#39;192.168.210.54&#39; (3109, 100a) [Receive Date] DA: &#39;20150114&#39; (3109, 100b) [Receive Time] TM: &#39;135015&#39; (3109, 1112) [Receive Origin Description] ST: &#39;RJNDAS54&#39; (7fd1, 0000) Private Creator UL: 26 (7fd1, 0010) Private tag data LO: &#39;GEIIS&#39; (7fd1, 1010) [GE IIS Compression ID] UL: 0 (7fe0, 0000) Group Length UL: 131084 (7fe0, 0010) Pixel Data OW: Array of 131072 elements . . We can also plot this slice. . Now we will read these files by using the read_file method and append them to a list. . full_mri = [] for i in all_files: data = pydicom.read_file(i) full_mri.append(data) print(f&quot;There are {len(full_mri)} slices in our MRI.&quot;) . There are 27 slices in our MRI. . . Important: Pay attention! This is important. . While appending slices in full_mri list we appended them in random fashion. All the slices should be in right order. To view the slice location of the MRI we can use SliceLocation. The current slice order is radndom and can be verified by inspecting the SliceLocation shown below: . for i in full_mri: print(i.SliceLocation) . 113.999995959439 77.9999962275740 107.999995419197 11.9999973042441 59.9999962290673 101.999994745866 29.9999952815023 155.999992554172 119.999996566542 83.9999967682912 149.999999502083 41.9999963629367 17.9999979772582 137.999998321624 35.9999959546749 47.9999970362677 131.999997780749 71.9999961590453 5.99999663091323 143.999998928727 89.9999955528687 95.9999960937442 0.0 65.9999961939969 53.9999958207213 23.9999946081714 125.999997173645 . . It is crucial to order them, otherwise the scan will be shuffled for no reason and can be a problem for visualization and for further analysis. . To correct this, we will sort the mri_data list using the SliceLocation. This can be done by the following code: . mri_data_ordered = sorted(full_mri, key=lambda x: x.SliceLocation) . Corrected MRI Slice Order: . for i in mri_data_ordered: print(i.SliceLocation) . 0.0 5.99999663091323 11.9999973042441 17.9999979772582 23.9999946081714 29.9999952815023 35.9999959546749 41.9999963629367 47.9999970362677 53.9999958207213 59.9999962290673 65.9999961939969 71.9999961590453 77.9999962275740 83.9999967682912 89.9999955528687 95.9999960937442 101.999994745866 107.999995419197 113.999995959439 119.999996566542 125.999997173645 131.999997780749 137.999998321624 143.999998928727 149.999999502083 155.999992554172 . . Now, lets move ahead and extract the actual Image data from the mri_data list. We will again use the .pixel_array to get the image content of the slice and then append it to the full_volume list. . full_volume = [] for slice in mri_data_ordered: full_volume.append(slice.pixel_array) full_volume = np.array(full_volume) . Lets print the shape! . print(full_volume.shape) . (27, 256, 256) . And now we can have look at few slices of the 3D Volume. We can plot this both in 2D and 3D way. . Animated GIF! . Your browser does not support the video tag. NIfTI . . What are NIfTI files? . Another popular and widely used data file extension in medical imaging is NIfTI. It is an acronym for Neuroimaging Informatics Technology Initiative. These are open file formats for the storage of medical image data. They were initially used for neuroimaging, a branch of medical imaging that focuses on the brain, but are now used for other radiological images too. . NIfTI Structure . Similar to DICOM files, NIfTI files have two components those are Header and Body. The header contains the metadata, but unlike DICOM files, the header of NIfTI has only necessary metadata. The body of NIfTI contains the actual image data(2D, 3D, 4D, etc.) | NIfTI files are more popular in research settings than in hospital standards. | File extension is “.nii” or “.nii-gz”. The prior extension refers to a compressed version. | In general they are easier to handle. | . You can read more about NIfTI files here. . How to read NIfTI file? . There are multiple python libraries that can handle NIfTI files. We will use Nibabel for our purpose. Lets start with some imports, remember you can run all this code as ipynb notebook on google colab or binder by just clicking &quot;run on colab&quot;, present on top of this page. . import nibabel as nib import matplotlib.pyplot as plt import numpy as np from pathlib import Path . We can read the NIfTI file in nibabel using nib.load(path) function. . path2nifti = &quot;./blog_1_data/BraTS20_Training_001_flair.nii&quot; mri_nifti = nib.load(path2nifti) . Just like DICOM files NIfTI files also carries metadata but only the necessary one. To access the metadata, we can print the NIfTI file. Click on Show Output to see the output. . print(mri_nifti); . &lt;class &#39;nibabel.nifti1.Nifti1Image&#39;&gt; data shape (240, 240, 155) affine: [[ -1. -0. -0. 0.] [ -0. -1. -0. 239.] [ 0. 0. 1. 0.] [ 0. 0. 0. 1.]] metadata: &lt;class &#39;nibabel.nifti1.Nifti1Header&#39;&gt; object, endian=&#39;&lt;&#39; sizeof_hdr : 348 data_type : b&#39;&#39; db_name : b&#39;&#39; extents : 0 session_error : 0 regular : b&#39;r&#39; dim_info : 0 dim : [ 3 240 240 155 1 1 1 1] intent_p1 : 0.0 intent_p2 : 0.0 intent_p3 : 0.0 intent_code : none datatype : int16 bitpix : 16 slice_start : 0 pixdim : [1. 1. 1. 1. 0. 0. 0. 0.] vox_offset : 0.0 scl_slope : nan scl_inter : nan slice_end : 0 slice_code : unknown xyzt_units : 2 cal_max : 0.0 cal_min : 0.0 slice_duration : 0.0 toffset : 0.0 glmax : 0 glmin : 0 descrip : b&#39;&#39; aux_file : b&#39;&#39; qform_code : scanner sform_code : scanner quatern_b : 0.0 quatern_c : 0.0 quatern_d : 1.0 qoffset_x : 0.0 qoffset_y : 239.0 qoffset_z : 0.0 srow_x : [-1. -0. -0. 0.] srow_y : [ -0. -1. -0. 239.] srow_z : [0. 0. 1. 0.] intent_name : b&#39;&#39; magic : b&#39;n+1&#39; . . Each entry is accessible by using header object in the NIfTI. . print(mri_nifti.header[&#39;qoffset_y&#39;]) print(mri_nifti.header[&#39;sizeof_hdr&#39;]) print(mri_nifti.header[&#39;pixdim&#39;]) . 239.0 348 [1. 1. 1. 1. 0. 0. 0. 0.] . . We can find the shape of image data using .shape . print(&quot;Shape of MRI:&quot;, mri_nifti.shape) . Shape of MRI: (240, 240, 155) . After going through the metadata lets access the actual(image) data from the NIfTI file. This is done using the get_fdata. Just like in dicom files the image data stored is a Numpy array. We can print the size and type. . mri_image_data = mri_nifti.get_fdata() print(&quot;Type of MRI Image data:&quot;, type(mri_image_data)) print(&quot;Shape of MRI Array:&quot;, mri_image_data.shape) . Type of MRI Image data: &lt;class &#39;numpy.memmap&#39;&gt; Shape of MRI Array: (240, 240, 155) . Lets plot the Image data. As the image is an MRI(3D) we have to plot it as GIF. . Your browser does not support the video tag. Affine Array and Orientation . All these Medical images(CT scans, MRI, X-RAYs) are represenation of some reference space to digital space. An affine array is an array that tells you the position of the image array data in a reference space. Discussion about the affine matrix is out of the scope of this blog. But I would strongly recommend you to read this article on the coordinate systems and affine for more information. Another great blog will be Understanding coordinate systems and DICOM for deep learning medical image analysis by Nikolas Adaloglou. . To access the affine array of the medical image in NIfTI, we use .affine command. . print(&quot;The affine Matrix of the MRI Image: n&quot;, mri_nifti.affine) . The affine Matrix of the MRI Image: [[ -1. -0. -0. 0.] [ -0. -1. -0. 239.] [ 0. 0. 1. 0.] [ 0. 0. 0. 1.]] . Through this Affine Array we can access the orinetation of our Medical imaging data in coordicate space. This can be done using nib.aff2axcodes(Affine Array) . print(&quot;Orientation of MRI Image:&quot;, nib.aff2axcodes(mri_nifti.affine)) . Orientation of MRI Image: (&#39;L&#39;, &#39;P&#39;, &#39;S&#39;) . The orientation of Image can be &quot;LPS&quot; or &quot;RAS&quot;. The meaning of them are as follows: . Later in pre-processing steps while building Machine/Deep Learning model we ensure that all the data we are geting is of same orientation. Usually the problem of jumble orientation among medical images happen when the data is from multiple sources/scanners. . DICOM to NIfTI Conversion . NIfTI files are easy to handle as compared to DICOM files, especially in the case of 3D data. In DICOM, usually, 3D data is stored in multiple files, where each file represents one slice of the data. Therefore it makes them difficult to handle. . In this section, we will learn how to convert DICOM to NIfTI using another python library called dicom2nifti. This library is straightforward and easy to use. . First we will import the library and define the path to dicom directory. . import dicom2nifti path2dicom = &quot;./blog_1_data/SE000001/&quot; . To covert the dicom2nifti we will use .convert_directory(path_to_dicom, save_directory) function that take two inputs, path of dicom and save directory. . dicom2nifti.convert_directory(path2dicom, &quot;./blog_1_data/&quot;) . We can further confirm the conversion by reading the converted file using nibabel. . path2nifti_from_dicom = &quot;./blog_1_data/201_t2w_tse.nii.gz&quot; nifti_from_dicom = nib.load(path2nifti_from_dicom) print(nifti_from_dicom) print(nifti_from_dicom.shape) . &lt;class &#39;nibabel.nifti1.Nifti1Image&#39;&gt; data shape (256, 256, 27) affine: [[-9.36898887e-01 3.20514254e-02 6.37919828e-02 1.15272324e+02] [ 3.03588901e-02 9.27917123e-01 -8.33337128e-01 -9.72956390e+01] [ 1.43172191e-02 1.29802674e-01 5.94150448e+00 -8.23735046e+01] [ 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.00000000e+00]] metadata: &lt;class &#39;nibabel.nifti1.Nifti1Header&#39;&gt; object, endian=&#39;&lt;&#39; sizeof_hdr : 348 data_type : b&#39;&#39; db_name : b&#39;&#39; extents : 0 session_error : 0 regular : b&#39;&#39; dim_info : 0 dim : [ 3 256 256 27 1 1 1 1] intent_p1 : 0.0 intent_p2 : 0.0 intent_p3 : 0.0 intent_code : none datatype : uint16 bitpix : 16 slice_start : 0 pixdim : [-1. 0.9375 0.9375 5.9999995 1. 1. 1. 1. ] vox_offset : 0.0 scl_slope : nan scl_inter : nan slice_end : 0 slice_code : unknown xyzt_units : 2 cal_max : 0.0 cal_min : 0.0 slice_duration : 0.0 toffset : 0.0 glmax : 0 glmin : 0 descrip : b&#39;&#39; aux_file : b&#39;&#39; qform_code : unknown sform_code : aligned quatern_b : -0.016685799 quatern_c : -0.9974202 quatern_d : -0.069515765 qoffset_x : 115.27232 qoffset_y : -97.29564 qoffset_z : -82.373505 srow_x : [-9.3689889e-01 3.2051425e-02 6.3791983e-02 1.1527232e+02] srow_y : [ 3.035889e-02 9.279171e-01 -8.333371e-01 -9.729564e+01] srow_z : [ 1.4317219e-02 1.2980267e-01 5.9415045e+00 -8.2373505e+01] intent_name : b&#39;&#39; magic : b&#39;n+1&#39; (256, 256, 27) . . Writing NIfTI files . Nibabel also provide us with function to save an data into NIfTI format. This is usefull when you want to perform some pre-processing and then later save it back to NIfTI. In below example, we will load a NIfTI image and perform some simple processing and then save it back to &quot;.nii-gz&quot; format. . We will perform simple threasholding using the following code and then plot them. . nifti_from_dicom_data = nifti_from_dicom.get_fdata() new_nifti_data = nifti_from_dicom_data * (nifti_from_dicom_data &gt; 300) . To convert the image data into NIfTI file, we have to use affine array along with new image data. We will use nib.Nifti1Image(new_image_Data, affine_array). We will later save the file using nib.save(nifti_file, path). . processed_nifti = nib.Nifti1Image(new_nifti_data, nifti_from_dicom.affine) nib.save(processed_nifti, &#39;./blog_1_data/201_t2w_tse_processed.nii.gz&#39;) . Congratulations! You made it! Now you understand how to read most popular medical imaging formats(DICOM and NIfTI). By following this notebook you also learned how to manipulate and visualize these images. . References . M. A. Akhloufi and M. Chetoui, Chest XR COVID-19 detection. https://cxr-covid19.grand-challenge.org/, 2021. | Dataset: https://www.kaggle.com/datasets/awsaf49/brats20-dataset-training-validation | pyDicom: https://pydicom.github.io/ | Dataset: https://www.kaggle.com/kmader/siim-medical-images?select=dicom_dir | . About Me: . I am Akansh maurya, working as a post-bacc at Robert Bosch Center of Data Science and AI, Indian Institute of Technology(IIT), Madras. . Follow @akansh_maurya . Consider joining our Slack channel for discussion, tutorials, talks and, new research in Deep learning and Medical Imaging. .",
            "url": "https://akansh12.github.io/confession-of-a-coding-freak/tutorial/2022/06/19/2D-ResUnet-based-Medical-Images(Chest-X-Rays)-Segmentation-using-Pytorch.html",
            "relUrl": "/tutorial/2022/06/19/2D-ResUnet-based-Medical-Images(Chest-X-Rays)-Segmentation-using-Pytorch.html",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "How to approach a 2D Medical Images(Chest-X-Rays) classification problem using Pytorch and MONAI",
            "content": "About . Knowledge is not the power, implementation is power. ~ Garrison Wynn. . You have completed a course in Machine Learning and Deep learning, and you are excited to apply your newly earned AI wisdom to the field of Healthcare and Medical images, but the only obstacle is that you don&#39;t know which tools you should use? How should you approach the problem and write the code? And the bigger question How should I move from theory to practice? . If these are your worries, then you are at the right place. This blog is all about giving you the right tools to implement your knowledge and feel powerful. Specifically, in this blog, we will learn how to use the Deep Learning method to classify two-dimensional (2D) Medical images, Chest X-rays into three classes COVID-19, Pneumonia, and Normal. We will be using two awesome python libraries Pytorch and MONAI. We will be learning Pre/Post-processing techniques, Data Augmentation methods. We will also review the concepts of the weighted cross-entropy loss function, learning rate scheduler, AUC-ROC metric, DenseNet, efficientNet, and so on. . Isn&#39;t that exciting? . . Consider this blog more like a tutorial that will help you to get familiar with the pipeline for training-validationg-testing for medical imaging(CXR) files. As this blog is written using fastpages, you can run this whole tutorial and associated code as a Jupyter notebook. . Dataset: Chest XR COVID-19 detection Challenge . The Coronavirus disease 2019 (COVID-19) pandemic remains a worldwide concern. In India alone, over 30 million people were infected and more than 400 thousand have lost their lives. Early diagnosis and separation of possibly infectious subjects is a significant step to fight against COVID-19, this can help in immediate treatment and care.he gold standard screening approach for identifying the coronavirus is reverse transcription-polymerase chain reaction (RT-PCR). Other alternative screening methods include the use of computed tomography (CT) and Chest X-rays that can show visual indicators of COVID-19 viral infections and other diseases like Pneumonia. . One of the advantages of these medical imaging methods is that they can help in the detection of the severity of the disease while tests like RT-PCR only indicate the presence of the infection. Medical imaging methods can also be used to identify the recovery status of a patient. . Interpretation of chest X-rays requires an expert physician and with the advent of the COVID-19 pandemic, a practitioner can misclassify the X-Rays easily. Computer-aided methods that are fast and reliable can prove to be effective and help doctors for better understanding and classification. Let us use or knowledge of AI to help radiologist. . What is the challenge? . Chest XR COVID-19 detection Challenge was hosted on grand-challenge.org in year 2021 and the challenge aims to develop a multiclass classification algorithm capable of detecting COVID-19 in Chest X-ray images. The dataset contains 3 image classes: COVID-19, Pneumonia and Normal (healthy). . Getting the Dataset . The dataset is available on google drive. It has a size of 3.61GB. All the CXR are either .jpeg, .jpg, .png files. We can download and extract the dataset using the following code. Please comment below, if you face any problem in downloading the dataset. . !gdown --id 12kvHaeYQVGtdcsaxtsGu8ft-OuY-BKya import zipfile import os os.makedirs(&quot;./data&quot;) with zipfile.ZipFile(&quot;./CXR_Covid-19_Challenge.zip&quot;, &#39;r&#39;) as zip_ref: zip_ref.extractall(&quot;./data/&quot;) . /usr/local/lib/python3.7/dist-packages/gdown/cli.py:131: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don&#39;t need to pass it anymore to use a file ID. category=FutureWarning, Downloading... From: https://drive.google.com/uc?id=12kvHaeYQVGtdcsaxtsGu8ft-OuY-BKya To: /content/CXR_Covid-19_Challenge.zip 100% 3.61G/3.61G [00:23&lt;00:00, 156MB/s] . Always before jumping to building models, our first task should be understanding the datasets. We need to at least answer the following questions ourselves. . What is the extension(.npy, .jpg, .jpeg, .dcm) of the files? | How many training/validation files are present? | How many classes are present? | Is the dataset imbalanced? | If the dataset is images, what are their dimensions? Are these dimensions uniform across all the files? | etc. | . As I mentioned these are the bare minimum questions that one should ask while performing Elementary Data Analysis(EDA). This helps in better preparation of our pipeline from data augmentation, and model selection to post-processing. . Elementary Data Analysis (EDA) . To answer the above questions lets perform EDA. . Defining path to training and validation folder and listing the directory present inside them. . train_loc = &quot;./data/train/&quot; val_loc = &quot;./data/validation/&quot; print(&quot;Name of classes: &quot;, os.listdir(train_loc)) print(&quot;Name of classes: &quot;, os.listdir(val_loc)) . Name of classes: [&#39;pneumonia&#39;, &#39;normal&#39;, &#39;covid&#39;] Name of classes: [&#39;pneumonia&#39;, &#39;normal&#39;, &#39;covid&#39;] . Now we can also look the number of Chest X-rays in each folder. . Number of images in train Pneumonia: 4273 Number of images in train Normal: 7151 Number of images in train Covid: 6534 - Number of images in val Pneumonia: 1432 Number of images in val Normal: 1000 Number of images in val Covid: 1000 . Often times the files in training data are repeated which can present a false narrative about the size of training data. A simple way to check this is to the number of unique files present inside the folder. If that number matches with our original datasize, then there are no duplicate files. . print(len(np.unique(pneumonia_train))) print(len(np.unique(normal_train))) print(len(np.unique(covid_train))) . 4273 7151 6534 . As you can see the number unique files is same as of original data, there are no repeated file among training dataset. . . Tip: This is my tip. . Another important aspect is to look if there is no data leakage in training and validation. Data leakage within train-val set leads to deceptive quatification of our model results and accuracy. . Finally lets have a visual look at the dataset. . As all the Chest X-rays are in .png format, we can check there dimensions. Most of the training models expect input array shape of uniform dimensions. This can be done of defining the following function. In this function we will reading all the images are then appending their dimensions in a pandas dataframe. Later we will be creating the dataframe for each class in train data. . def image_size_csv(image_list, file_type = &#39;normal&#39;): train_meta = pd.DataFrame(np.zeros((len(image_list), 4)), columns=[&#39;img_name&#39;, &#39;height&#39;, &#39;weidth&#39;, &#39;channel&#39;]) train_meta[&#39;img_name&#39;] = image_list for j in tqdm(image_list): train_meta.loc[train_meta[&#39;img_name&#39;] == j, &#39;height&#39;] = plt.imread((os.path.join(train_loc+file_type, j))).shape[0] train_meta.loc[train_meta[&#39;img_name&#39;] == j, &#39;weidth&#39;] = plt.imread((os.path.join(train_loc+file_type, j))).shape[1] try: train_meta.loc[train_meta[&#39;img_name&#39;] == j, &#39;channel&#39;] = plt.imread((os.path.join(train_loc+file_type, j))).shape[2] except: pass return train_meta . normal_train_meta = image_size_csv(normal_train) pneumonia_train_meta = image_size_csv(pneumonia_train, &#39;pneumonia&#39;) covid_train_meta = image_size_csv(covid_train, &#39;covid&#39;) . . Now describing the dataframe will show us the dimension properties of the dataset. . print(&quot;Normal-CXR-data&quot;) print(normal_train_meta.describe()) print(&quot;-&quot;*40) print(&quot;Pneumonia-CXR-data&quot;) print(pneumonia_train_meta.describe()) print(&quot;-&quot;*40) print(&quot;COVID-CXR-data&quot;) print(covid_train_meta.describe()) . . Normal-CXR-data height weidth channel count 7151.0 7151.0 7151.0 mean 1024.0 1024.0 0.0 std 0.0 0.0 0.0 min 1024.0 1024.0 0.0 25% 1024.0 1024.0 0.0 50% 1024.0 1024.0 0.0 75% 1024.0 1024.0 0.0 max 1024.0 1024.0 0.0 - Pneumonia-CXR-data height weidth channel count 4273.0 4273.0 4273.0 mean 1024.0 1024.0 0.0 std 0.0 0.0 0.0 min 1024.0 1024.0 0.0 25% 1024.0 1024.0 0.0 50% 1024.0 1024.0 0.0 75% 1024.0 1024.0 0.0 max 1024.0 1024.0 0.0 - COVID-CXR-data height weidth channel count 6534.000000 6534.000000 6534.000000 mean 565.613101 573.710285 0.219467 std 250.910454 291.006437 0.791746 min 224.000000 224.000000 0.000000 25% 512.000000 512.000000 0.000000 50% 512.000000 512.000000 0.000000 75% 512.000000 512.000000 0.000000 max 4095.000000 4280.000000 4.000000 . From above we can see that for Pneumonia and Normal CXR, image size is uniform and 1024x1024, but for COVID-CXR it varies from 224x224 to 4095 X 4280. . A General Pipeline . Every Machine Learning based solution is similar in some sense. It follows a pipeline as illustrated below. You will find this pipeline useful for this as well as your future project. . Exploring Pre-Processing and Data Augmentations . Pre-processing steps make our data ready for the model to process and optimize better. Pre-processing steps like Z-score normalization help the model to converge easily. These steps also enhance the quality of the dataset. In this blog, I will show you how to implement two types of image-enhancing pre-processing techniques that are common for Chest X-rays. These are: . CLAHE: Contrast limited adaptive histogram equalization | Gamma Correction | Data augmentation | . While CLAHE and Gamma Correction enhance the image, Data augmentation techniques help in increasing the data points thus helping a model generalization, avoiding overfitting, and help in resolving class imbalance issues. It is a good practice to have a visual inspection of all these pre-processing methods before final adoption in the model pipeline. . I will be writing code to directly implement CLAHE and Gamma correction, thus expecting readers to read more about these topic on their own. . CLAHE and Gamma Correction . To implement CLAHE and Gamma correction, We will use skimage. Lets import exposure class from skimage. . from skimage import exposure . The gamma correction is a pixel-level operation defined by the following formula for uint8 images: . $$ y = 255*(x/255)^ gamma $$$$ x: original-image-pixel-intensity $$$$ y: output-image-pixel-intensity $$$$ gamma: gamma-correction-coefficient $$ This can be implemeted easily in skimage using exposure class, we need to use function exposure.adjust_gamma(image_array, gamma_coefficient) . Similar to Gamma correction CLAHE can be implemented using function exposure.equalize_adapthist(image_array) . CLAHE is an improved Histogram Equalization method(HE). HE aims to distribute the grey level within the image. CLAHE performs HE over a small region of patches in an image. The window size used in here is 1/8th of the original size of the image. . Lets visualize the results of these methods. Here Gamma Coefficient is set to 0.6. . Augmentation . The Data Augmentation technique is used to increase the amount of data by adding slightly changed inputs to the system. Data augmentation helps to improve the robustness of the model, act as a regularizer and reduce overfitting. We are applying three types of augmentation methods. Those are random rotation, horizontal flip, random perspective. The Deep CNN model used in this paper, takes the input image of constant size. As described in the data description section, the image size varies a lot. To overcome this problem the image size was chosen to be 224X224. . For Augmentation we will be using pytorch sub-library called torchvision. This library generally deals with computer vision tasks. . import torchvision from torchvision import transforms . Text(0.5, 1.0, &#39;Random Perspective&#39;) . Z-Score Normalization . Z-score normalization refers to the process of normalizing every value in a dataset such that the mean of all of the values is 0 and the standard deviation is 1. . $$ y = (x- mu)/ sigma $$ $ mu$(Mean) and $ sigma$(Standard deviation) has to calculated for training set and then used to normalize the training set and later used while performing testing. . To calculate $ mu$(Mean) and $ sigma$(Standard deviation) we need to read every image in training set and then store the values. An efficient way perform this is done after defining pytorch dataset. We will come back to z-score normalization after defining pytorch dataset and dataloader. . Model Training . Now after understanding the dataset and required pre-processing steps, we can now move forward to building our model. From your knowledge of Deep Learning, you must be knowing that deep learning models are nothing but matrix multiplication with added non-linearity. If models are made of matrix then we need input data in similar format. So our first step in training a model is to create a Pytorch Dataset that will convert our data(Images) to tensor. . Pytorch Dataset Class . A pytorch dataset class will have three functions: . init : To initialize the variables that will be used in the class. | len : This function returns the length of the dataset. | getitem: This function will return the tensor when we call the index of the dataet. | class covid_dataset(Dataset): def __init__(self, image_loc, label_loc, transform, data_type = &#39;train&#39;): filenames = [] for root, dirs, files in os.walk(image_loc): for file in files: if file.endswith(&#39;.jpg&#39;) == True or file.endswith(&#39;.png&#39;) == True : filenames.append(file) if data_type == &#39;train&#39; or data_type == &#39;valid&#39;: self.full_filenames = glob(image_loc+&#39;*/*.*&#39;) else: self.full_filenames = glob(image_loc+&#39;*.*&#39;) label_df = pd.read_csv(label_loc) label_df.set_index(&quot;0&quot;, inplace = True) self.labels = [label_df.loc[filename].values[0] for filename in filenames] self.transform = transform def __len__(self): return len(self.full_filenames) def __getitem__(self,idx): image = Image.open(self.full_filenames[idx]) image = image.convert(&#39;RGB&#39;) image = self.transform(image) return image, self.labels[idx] . You can read more about Pytorch Custom Dataset here . Lets test our pytorch dataset. It inputs image location, label location and transforms(Augmentation + tensor conversion). We will also look the shape and label of one example from dataset. . train_data_1 = covid_dataset(image_loc = data_dir[&#39;train&#39;], label_loc = label_csv[&#39;train&#39;], transform = transforms.Compose([transforms.Resize((256,256)),transforms.ToTensor()]), data_type = &#39;train&#39;) for x, y in train_data_1: print(x.shape) print(y) break . torch.Size([3, 256, 256]) 2 . . The Pytoch dataset is working fine. Now lets define the Pytorch Dataloader. Pytorch Dataloader is mainly used to convert our dataset into batches. As weights of model are updated after data going through batches. This also shuffles our data. . trainloader = DataLoader(train_data_1,batch_size = 64,shuffle = True) for x, y in trainloader: print(x.shape) print(y) break . torch.Size([64, 3, 256, 256]) tensor([1, 2, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 2, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 2, 2, 1, 2, 0, 2, 0, 1, 2, 0, 0, 2, 2]) . . Z- Score mean calculations after defining dataset and dataloader class. I would highly suggest you watch this video to undertand how the following code works. Please also read this blog for mathematical understanding of mean calculation for datasets in batches. . def get_mean_std(loader): # var[X] = E[X**2] - E[X]**2 channels_sum, channels_sqrd_sum, num_batches = 0, 0, 0 for data, _ in tqdm(loader): channels_sum += torch.mean(data, dim=[0, 2, 3]) channels_sqrd_sum += torch.mean(data ** 2, dim=[0, 2, 3]) num_batches += 1 mean = channels_sum / num_batches std = (channels_sqrd_sum / num_batches - mean ** 2) ** 0.5 return mean, std mean, std = get_mean_std(trainloader) print(mean) print(std) . tensor([0.5027, 0.5027, 0.5028]) tensor([0.2459, 0.2459, 0.2459]) . . Now to maintain simplicity and create a baseline model, we will using only few data augmentation. I encourage you to experiment more with this. . data_transforms = { &#39;train&#39;: transforms.Compose([ transforms.Resize(size = (256,256)), transforms.RandomHorizontalFlip(p = 0.5), transforms.RandomRotation((-20,20)), transforms.CenterCrop(size = 224), transforms.ToTensor(), transforms.Normalize([0.5027,0.5027,0.5027],[0.2459, 0.2459, 0.2459]) ]), &#39;valid&#39; : transforms.Compose([ transforms.Resize(size = (224,224)), transforms.ToTensor(), transforms.Normalize([0.5027,0.5027,0.5027],[0.2459, 0.2459, 0.2459]) ]) } . . Again we need to define train and validation dataset and there corresponding dataloader. . valid_data = covid_dataset(image_loc = data_dir[&#39;valid&#39;], label_loc = label_csv[&#39;valid&#39;], transform = data_transforms[&#39;valid&#39;], data_type = &#39;valid&#39;) train_data = covid_dataset(image_loc = data_dir[&#39;train&#39;], label_loc = label_csv[&#39;train&#39;], transform = data_transforms[&#39;train&#39;], data_type = &#39;train&#39;) trainloader = DataLoader(train_data,batch_size = 8,shuffle = True, num_workers = 2) validloader = DataLoader(valid_data,batch_size = 16,shuffle = False, num_workers = 2) . . Defining Model . In this blog my sole purpose is to show you how to develop a baseline for CXR classification. So we will use a basic model architecture, ResNet50. But I again encourage you to experiment with deeper and new architecture, such as . Resnet150 | DenseNet121 | EfficientNet(B0-B4) | . In Pytorch models we can easily find these architecture. . resnet50 = models.resnet50(pretrained=True) . If you had noticed that we made, pretrained = True as one of the parameter. This means the model will use weights that it learnt while training from ImageNet Dataset. . print(resnet50) . ResNet( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (layer1): Sequential( (0): Bottleneck( (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer2): Sequential( (0): Bottleneck( (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (3): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer3): Sequential( (0): Bottleneck( (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (3): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (4): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (5): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer4): Sequential( (0): Bottleneck( (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (avgpool): AdaptiveAvgPool2d(output_size=(1, 1)) (fc): Linear(in_features=2048, out_features=1000, bias=True) ) . . One more thing to notice is the last layer of current ResNet50 model. Scroll down the output and you can see out_features = 1000 Again as the original model was made for ImageNet dataset having 1000 classes, so that is the out_features or number of output nodes was set to 1000. For our task we have only 3 classes, so we need to modify this accordingly. Also we can change the final few layers, the classification head, with some other fully connected layers. . Also we will be using LogSoftmax as the final output activation function. . resnet50.fc = nn.Sequential( nn.Linear(2048, 256), nn.ReLU(), nn.Dropout(0.4), nn.Linear(256, 3), nn.LogSoftmax(dim=1) # For using NLLLoss() ) . Loss function, optimizers and Metric . Chossing Loss function is depended the output activation fundion we choosed. In our case we will be using Negative Log Likelihood loss (NLL Loss). Please refer to the table for your use case. . Output Activation Number of Outputs Loss Function . None | 1 | nn.BCEWithLogitsLoss | . Sigmoid | 1 | nn.BCELoss | . None | Any(More than 1) | nn.CrossEntropyLoss | . log_softmax | Any(More than 1) | nn.NLLLoss | . criterion = nn.NLLLoss() . We will be using ADAM optimizer for optimization with initial learning rate as 0.001. Along with the optimizer, we will be using a learning rate Scheduler. The purpose of learning rate scheduler is to decrease the learing rate when validation set loss is not reducing for better optimization. . optimizer = optim.Adam(model.parameters(),lr = 0.001) schedular = optim.lr_scheduler.ReduceLROnPlateau(optimizer,factor = 0.1,patience = 5) . If you cant measure, you cant imaprove. For mesuring the results, we will be using accuracy metric and will be ploting confusion matrix. . def accuracy(y_pred,y_true): y_pred = F.softmax(y_pred, dim =1) top_p,top_class = y_pred.topk(1,dim = 1) equals = top_class == y_true.view(*top_class.shape) return torch.mean(equals.type(torch.FloatTensor)) def calc_confusion_matrix(model, loader, device, nb_classes): confusion_matrix = np.zeros((nb_classes, nb_classes)) with torch.no_grad(): for i, (inputs, classes) in tqdm(enumerate(loader)): inputs = inputs.to(device) classes = classes.to(device) outputs = model(inputs) _, preds = torch.max(outputs, 1) for t, p in zip(classes, preds.view(-1)): confusion_matrix[t.long(), p.long()] += 1 return confusion_matrix.astype(int) . . Training and Validation loop . For training purposes, normal pytorch training and validation loop is used. . train_loss_hist = [] valid_loss_hist = [] train_acc_hist = [] valid_acc_hist = [] for i in range(epochs): train_loss = 0.0 valid_loss = 0.0 train_acc = 0.0 valid_acc = 0.0 model.train() for images,labels in tqdm(trainloader): images = images.to(device) labels = labels.to(device) ps = model(images) loss = criterion(ps,labels) optimizer.zero_grad() loss.backward() optimizer.step() train_acc += accuracy(ps,labels) train_loss += loss.item() avg_train_acc = train_acc / len(trainloader) train_acc_hist.append(avg_train_acc) avg_train_loss = train_loss / len(trainloader) train_loss_hist.append(avg_train_loss) model.eval() with torch.no_grad(): for images,labels in tqdm(validloader): images = images.to(device) labels = labels.to(device) ps = model(images) loss = criterion(ps,labels) valid_acc += accuracy(ps,labels) valid_loss += loss.item() avg_valid_acc = valid_acc / len(validloader) valid_acc_hist.append(avg_valid_acc) avg_valid_loss = valid_loss / len(validloader) valid_loss_hist.append(avg_valid_loss) schedular.step(avg_valid_loss) if avg_valid_loss &lt;= valid_loss_min: print(&#39;Validation loss decreased ({:.6f} --&gt; {:.6f}). Saving model ...&#39;.format(valid_loss_min,avg_valid_loss)) torch.save({ &#39;epoch&#39; : i, &#39;model_state_dict&#39; : model.state_dict(), &#39;optimizer_state_dict&#39; : optimizer.state_dict(), &#39;valid_loss_min&#39; : avg_valid_loss },&#39;Resnet50_5_epochs.pt&#39;) valid_loss_min = avg_valid_loss print(&quot;Epoch : {} Train Loss : {:.6f} Train Acc : {:.6f}&quot;.format(i+1,avg_train_loss,avg_train_acc)) print(&quot;Epoch : {} Valid Loss : {:.6f} Valid Acc : {:.6f}&quot;.format(i+1,avg_valid_loss,avg_valid_acc)) . . Results . Loss Curve . &lt;matplotlib.legend.Legend at 0x7f649c2229d0&gt; . Accuracy and Confusion Matrix . Text(0, 0.5, &#39;Accuracy&#39;) . Suggestions . This dataset is part of Chest XR COVID-19 detection challenge hosted on grandchallenge.org. I participated in that competition and got 3rd position. My baseline solution was similar to this blog. . If you want to read my third position solution, please read the corresponding paper: . WEIGHTED AVERAGE ENSEMBLE METHOD FOR CLASSIFICATION OF COVID-19 AND PNEUMONIA FROM CHEST X-RAYS by Akansh Maurya, Dr. Ganapathy Krishnamurthi . References . M. A. Akhloufi and M. Chetoui, Chest XR COVID-19 detection. https://cxr-covid19.grand-challenge.org/, 2021. | Pytorch: https://pytorch.org/ | Monai: https://monai.io/ | PyTorch Computer Vision Cookbook by Michael Avendi | . About Me: . I am Akansh maurya, working as a post-bacc at Robert Bosch Center of Data Science and AI, Indian Institute of Technology(IIT), Madras. You can connect me on twitter or join telegram group. . My page:https://akansh12.github.io/&gt; Follow @akansh_maurya&gt; .",
            "url": "https://akansh12.github.io/confession-of-a-coding-freak/tutorial/2022/06/02/2D-Medical-Images(Chest-X-Rays)-Classification-with-MONAI-and-Pytorch.html",
            "relUrl": "/tutorial/2022/06/02/2D-Medical-Images(Chest-X-Rays)-Classification-with-MONAI-and-Pytorch.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Pre-processing Medical Images for Deep Learning Models",
            "content": "About . The seemingly intimidating journey of the Application of AI in Medical Imaging starts with dealing with peculiar file formats. In this blog, we will deal with two data formats that you will deal with more than ninety percent of the time, DICOM and NIFTI. . Unlike other typical formats of images like JPEG, and PNG the Medical imaging community uses a different format(DICOM and NIFTI) because of certain reasons. Medical Images (X-Rays, MRI, CT scans) are generally generated in Hospitals or Scan Centers. Other than image data the scan center collects some other metadata of the subject, this includes gender, age, name, body part examined, etc(We will discuss in a later section). So to share both of these data, Image data and metadata, with researcher like us there exist a standardized data format. DICOM and Nifti are the most common among them. . . Consider this blog more like a tutorial that will help you to get familiar with the tools used to read-open-write medical imaging files. As this blog is written using fastpages, you can run this whole tutorial and associated code as a Jupyter notebook. . DICOM . What are DICOM files? . According to the Wikipedia, they are: . Digital Imaging and Communications in Medicine (DICOM) is the standard for the communication and management of medical imaging information and related data.DICOM is most commonly used for storing and transmitting medical images enabling the integration of medical imaging devices such as scanners, servers, workstations, printers, network hardware, and picture archiving and communication systems (PACS) from multiple manufacturers. It has been widely adopted by hospitals and is making inroads into smaller applications such as dentists&#39; and doctors&#39; offices. . In summary: . Store Medical image data(Body) + Metadata(Header) associated with it. | Used for communication between Medical Imaging devices. | Widely used in Hospital Atmosphere. | . DICOM Structure . How to Read DICOM files? . We will be using Pydicom a python library to read DICOM files. . Lets start with some imports, remember you can run all this code as ipynb notebook on google colab or binder by just clicking &quot;run on colab&quot;, present on top of this page. . Importing: . pydicom: For reading DICOM files. | matplotlib.pyplot: To plot Medical Images. | numpy: For array manipulation. | pathlib: For easy path handling. | . import pydicom import matplotlib.pyplot as plt import numpy as np from pathlib import Path . 2-Dimensional(2D) Data . DICOM files can have multiple extentions like .dicom or .dcm. In our case we have .dcm as an extention. Reading a single file .dcm file using pydicom.read_file(path) function. . path2dicom = &quot;./blog_1_data/ID_0000_AGE_0060_CONTRAST_1_CT(1).dcm&quot; dicom_file = pydicom.read_file(path2dicom) . As discussed in the earlier sections, DICOM files are a combination of medical image data and metadata. To access all the metadata, we can print the DICOM files. Click on Show Output to see the print output. . print(dicom_file) . Dataset.file_meta - (0002, 0000) File Meta Information Group Length UL: 194 (0002, 0001) File Meta Information Version OB: b&#39; x00 x01&#39; (0002, 0002) Media Storage SOP Class UID UI: CT Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.108821836759549281694712274169 (0002, 0010) Transfer Syntax UID UI: Implicit VR Little Endian (0002, 0012) Implementation Class UID UI: 1.2.40.0.13.1.1.1 (0002, 0013) Implementation Version Name SH: &#39;dcm4che-1.4.31&#39; - (0008, 0000) Group Length UL: 430 (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0008) Image Type CS: [&#39;ORIGINAL&#39;, &#39;PRIMARY&#39;, &#39;AXIAL&#39;] (0008, 0016) SOP Class UID UI: CT Image Storage (0008, 0018) SOP Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.108821836759549281694712274169 (0008, 0020) Study Date DA: &#39;19830708&#39; (0008, 0021) Series Date DA: &#39;19830708&#39; (0008, 0022) Acquisition Date DA: &#39;19830708&#39; (0008, 0023) Content Date DA: &#39;19830708&#39; (0008, 0030) Study Time TM: &#39;085723.000000&#39; (0008, 0031) Series Time TM: &#39;090344.332000&#39; (0008, 0032) Acquisition Time TM: &#39;090517.558000&#39; (0008, 0033) Content Time TM: &#39;090501.593000&#39; (0008, 0040) Data Set Type US: 0 (0008, 0041) Data Set Subtype LO: &#39;IMA SPI&#39; (0008, 0050) Accession Number SH: &#39;2819497684894126&#39; (0008, 0060) Modality CS: &#39;CT&#39; (0008, 0070) Manufacturer LO: &#39;SIEMENS&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;&#39; (0008, 1010) Station Name SH: &#39;&#39; (0008, 1090) Manufacturer&#39;s Model Name LO: &#39;SOMATOM PLUS 4&#39; (0008, 2111) Derivation Description ST: &#39;&#39; (0009, 0000) Private Creator UN: b&#39; x86 x00 x00 x00&#39; (0009, 0010) Private tag data LO: &#39;SPI RELEASE 1&#39; (0009, 0012) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0009, 0013) Private tag data LO: &#39;SIEMENS CM VA0 LAB&#39; (0009, 0020) Private tag data LO: &#39;SIEMENS CT VA0 IDE&#39; (0009, 0030) Private tag data LO: &#39;SIEMENS CT VA0 ORI&#39; (0010, 0000) Group Length UL: 70 (0010, 0010) Patient&#39;s Name PN: &#39;TCGA-17-Z034&#39; (0010, 0020) Patient ID LO: &#39;TCGA-17-Z034&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1010) Patient&#39;s Age AS: &#39;060Y&#39; (0011, 0000) Private Creator UN: b&#39;F x00 x00 x00&#39; (0011, 0010) Private tag data LO: &#39;SPI RELEASE 1&#39; (0011, 0011) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0011, 0012) Private tag data LO: &#39;SIEMENS ISI&#39; (0012, 0000) Group Length UL: 758 (0012, 0062) Patient Identity Removed CS: &#39;YES&#39; (0012, 0063) De-identification Method LO: &#39;Per DICOM PS 3.15 AnnexE. Details in 0012,0064&#39; (0012, 0064) De-identification Method Code Sequence 8 item(s) - (0008, 0000) Group Length UL: 76 (0008, 0100) Code Value SH: &#39;113100&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Basic Application Confidentiality Profile&#39; (0008, 0000) Group Length UL: 58 (0008, 0100) Code Value SH: &#39;113101&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Pixel Data Option&#39; (0008, 0000) Group Length UL: 56 (0008, 0100) Code Value SH: &#39;113103&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Graphics Option&#39; (0008, 0000) Group Length UL: 58 (0008, 0100) Code Value SH: &#39;113105&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Descriptors Option&#39; (0008, 0000) Group Length UL: 80 (0008, 0100) Code Value SH: &#39;113107&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Longitudinal With Modified Dates Option&#39; (0008, 0000) Group Length UL: 72 (0008, 0100) Code Value SH: &#39;113108&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Patient Characteristics Option&#39; (0008, 0000) Group Length UL: 64 (0008, 0100) Code Value SH: &#39;113109&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Device Identity Option&#39; (0008, 0000) Group Length UL: 60 (0008, 0100) Code Value SH: &#39;113111&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Safe Private Option&#39; (0013, 0000) Private Creator UN: b&#39;. x00 x00 x00&#39; (0013, 0010) Private tag data LO: &#39;CTP&#39; (0013, 1010) Private tag data UN: b&#39;TCGA-LUAD x00&#39; (0013, 1013) Private tag data UN: b&#39;77779002&#39; (0018, 0000) Group Length UL: 342 (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; (0018, 0020) Scanning Sequence CS: &#39;RM&#39; (0018, 0050) Slice Thickness DS: &#39;8.0&#39; (0018, 0060) KVP DS: &#39;140.0&#39; (0018, 0090) Data Collection Diameter DS: &#39;500.0&#39; (0018, 1000) Device Serial Number LO: &#39; 20643&#39; (0018, 1020) Software Versions LO: &#39;VB40W&#39; (0018, 1110) Distance Source to Detector DS: &#39;1005.0&#39; (0018, 1111) Distance Source to Patient DS: &#39;570.0&#39; (0018, 1120) Gantry/Detector Tilt DS: &#39;0.0&#39; (0018, 1130) Table Height DS: &#39;170.0&#39; (0018, 1140) Rotation Direction CS: &#39;CW&#39; (0018, 1150) Exposure Time IS: &#39;750&#39; (0018, 1151) X-Ray Tube Current IS: &#39;206&#39; (0018, 1152) Exposure IS: &#39;155&#39; (0018, 1170) Generator Power IS: &#39;29&#39; (0018, 1190) Focal Spot(s) DS: &#39;1.2&#39; (0018, 1200) Date of Last Calibration DA: &#39;19830623&#39; (0018, 1201) Time of Last Calibration TM: &#39;214703.931000&#39; (0018, 1210) Convolution Kernel SH: &#39;59 .10.AB50&#39; (0018, 5100) Patient Position CS: &#39;HFS&#39; (0019, 0000) Private Creator UN: b&#39; xf4 x00 x00 x00&#39; (0019, 0010) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0019, 0011) Private tag data LO: &#39;SIEMENS CT VA0 GEN&#39; (0019, 0013) Private tag data LO: &#39;SIEMENS CT VA0 COAD&#39; (0019, 0015) Private tag data LO: &#39;SIEMENS CM VA0 ACQU&#39; (0019, 1392) [Osteo Regression Line Slope] DS: &#39;0.979&#39; (0019, 1393) [Osteo Regression Line Intercept] DS: &#39;-1.42&#39; (0019, 13b0) [Feed per Rotation] DS: &#39;8.0&#39; (0019, 13c0) [Pulmo Water] DS: &#39;2.154907&#39; (0019, 13c1) [Pulmo Air] DS: &#39;-992.9709&#39; (0019, 13c3) [Pulmo Time] TM: &#39;201523.000000&#39; (0020, 0000) Group Length UL: 566 (0020, 000d) Study Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.292315456232117737481743327260 (0020, 000e) Series Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.531955806841803044139009743992 (0020, 0010) Study ID SH: &#39;&#39; (0020, 0011) Series Number IS: &#39;5&#39; (0020, 0012) Acquisition Number IS: &#39;3&#39; (0020, 0013) Instance Number IS: &#39;25&#39; (0020, 0030) Image Position DS: [-02.166094E+02, -2.086094E+02, -2.475000E+02] (0020, 0032) Image Position (Patient) DS: [-217, -209, -247.5] (0020, 0035) Image Orientation DS: [001.000000E+00, 00.000000E+00, 00.000000E+00, 00.000000E+00, 01.000000E+00, 00.000000E+00] (0020, 0037) Image Orientation (Patient) DS: [1, 0, 0, 0, 1, 0] (0020, 0050) Location DS: &#39;-247.5&#39; (0020, 0052) Frame of Reference UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.299172824841582204484171666104 (0020, 0070) Image Geometry Type LO: &#39;PLANAR&#39; (0020, 0080) Masking Image CS: &#39;&#39; (0020, 1040) Position Reference Indicator LO: &#39;&#39; (0020, 1041) Slice Location DS: &#39;-247.5&#39; (0020, 3100) Source Image IDs CS: &#39;&#39; (0020, 3402) Modified Image ID CS: &#39;&#39; (0020, 3403) Modified Image Date DA: &#39;&#39; (0020, 3405) Modified Image Time TM: &#39;&#39; (0020, 5000) Original Image Identification AT: None (0020, 5002) Original Image Identification Nomen LO: &#39;&#39; (0021, 0000) Private Creator UN: b&#39;h x00 x00 x00&#39; (0021, 0010) Private tag data LO: &#39;SIEMENS MED&#39; (0021, 0012) Private tag data LO: &#39;SIEMENS CT VA0 GEN&#39; (0021, 0022) Private tag data LO: &#39;SIEMENS CT VA0 RAW&#39; (0021, 0030) Private tag data LO: &#39;SIEMENS CT VA0 ORMR&#39; (0028, 0000) Group Length UL: 290 (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0005) Image Dimensions US: 2 (0028, 0010) Rows US: 512 (0028, 0011) Columns US: 512 (0028, 0030) Pixel Spacing DS: [007.812500e-01, 007.812500e-01] (0028, 0040) Image Format CS: &#39;RECT&#39; (0028, 0050) Manipulated Image LO: &#39;&#39; (0028, 0060) Compression Code CS: &#39;NONE&#39; (0028, 0100) Bits Allocated US: 16 (0028, 0101) Bits Stored US: 12 (0028, 0102) High Bit US: 11 (0028, 0103) Pixel Representation US: 0 (0028, 0200) Image Location US: 32736 (0028, 0301) Burned In Annotation CS: &#39;NO&#39; (0028, 0303) Longitudinal Temporal Information M CS: &#39;MODIFIED&#39; (0028, 1050) Window Center DS: [000010, -0550] (0028, 1051) Window Width DS: [000400, 01800] (0028, 1052) Rescale Intercept DS: &#39;-1024.0&#39; (0028, 1053) Rescale Slope DS: &#39;1.0&#39; (0029, 0000) Private Creator UN: b&#39;N x00 x00 x00&#39; (0029, 0010) Private tag data LO: &#39;SIEMENS MED DISPLAY&#39; (0029, 0011) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0029, 0030) Private tag data LO: &#39;SIEMENS MED MG&#39; (0031, 0000) Private Creator UN: b&#39; x14 x00 x00 x00&#39; (0031, 0012) Private tag data LO: &#39;SIEMENS ISI&#39; (0032, 0000) Group Length UL: 8 (0032, 4000) Study Comments LT: &#39;&#39; (0040, 0000) Group Length UL: 8 (0040, 1003) Requested Procedure Priority SH: &#39;&#39; (0091, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0091, 0010) Private tag data LO: &#39;SIENET&#39; (0095, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0095, 0010) Private tag data LO: &#39;SIENET&#39; (0097, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0097, 0010) Private tag data LO: &#39;SIENET&#39; (0099, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0099, 0010) Private tag data LO: &#39;SIENET&#39; (7003, 0000) Private Creator UN: b&#39; x14 x00 x00 x00&#39; (7003, 0010) Private tag data LO: &#39;SIEMENS MED&#39; (7fe0, 0000) Group Length UL: 524296 (7fe0, 0010) Pixel Data OW: Array of 524288 elements . . I know that is a hell lot of metadata. Each entry is accessible by its unique Data Tag. Data tags use hexadecimal encoded identifiers. As an example: . . We can call out different using the following code: . Note: The 0x in front of the identifier tells the python code to treat the data tag values as hexadecimal. . print(dicom_file[0x0028, 0x0100]) print(dicom_file[0x0028, 0x0010]) print(dicom_file[0x0018, 0x0015]) . (0028, 0100) Bits Allocated US: 16 (0028, 0010) Rows US: 512 (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; . . There is also an alternative method or one can say more direct way to access various metadata values from your DICOM file. To do so we can treat the loaded DICOM file as an object and can access the metadata values as variables. See the example below: . Please note the lettering:&#39;Body Part Examined&#39; becomes &#39;BodyPartExamined&#39; (so-called Pascal Case). . print(&quot;Bits Allocated:&quot; ,dicom_file.BitsAllocated) print(&quot;Rows:&quot; ,dicom_file.Rows) print(&quot;Body Part Examined:&quot;, dicom_file.BodyPartExamined) . Bits Allocated: 16 Rows: 512 Body Part Examined: CHEST . . After going through the metadata lets access the actual(image) data from the dicom file. This is done using the pixel_array. . This image data is numpy array. We can print its type and size. . ct_image_data = dicom_file.pixel_array print(&quot;Type of CT Image data:&quot;, type(ct_image_data)) print(&quot;Size of CT Image data:&quot;, ct_image_data.shape) . Type of CT Image data: &lt;class &#39;numpy.ndarray&#39;&gt; Size of CT Image data: (512, 512) . Let&#39;s plot the image using Matplotlib.pyplot to have a visual inspection of the CT image data. . 3-Dimensional(3D) Data . In the previous section, we learned how to read the DICOM file. Essentially we read a slice of a CT scan. Usually CT scans and MRI are 3D data, their shape is of (HxWxD) format. In this section, we will take learn how to read and understand 3D data stored as multiple 2D DICOM files. . We will use Path function form pathlib to define the path of the Dicom folder. Then we will use glob function with (&quot;*&quot;) to list all the files present inside the folder. . path2dicom = Path(&quot;./blog_1_data/SE000001/&quot;) all_files = list(path2dicom.glob(&quot;*&quot;)) all_files . [PosixPath(&#39;blog_1_data/SE000001/MR000019&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000013&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000018&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000002&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000010&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000017&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000005&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000026&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000020&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000014&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000025&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000007&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000003&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000023&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000006&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000008&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000022&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000012&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000001&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000024&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000015&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000016&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000000&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000011&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000009&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000004&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000021&#39;)] . . Lets read one slice of the MRI usinf read_file function. and print the metadata. . one_mri_slice = pydicom.read_file(all_files[14]) print(one_mri_slice) . Dataset.file_meta - (0002, 0000) File Meta Information Group Length UL: 214 (0002, 0001) File Meta Information Version OB: b&#39; x00 x01&#39; (0002, 0002) Media Storage SOP Class UID UI: MR Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0002, 0010) Transfer Syntax UID UI: Explicit VR Little Endian (0002, 0012) Implementation Class UID UI: 1.2.840.114089.1.0.0.3.3.38 (0002, 0013) Implementation Version Name SH: &#39;DCF 3.3.38c&#39; (0002, 0016) Source Application Entity Title AE: &#39;DCF&#39; - (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0008) Image Type CS: [&#39;ORIGINAL&#39;, &#39;PRIMARY&#39;, &#39;M_SE&#39;, &#39;M&#39;, &#39;SE&#39;] (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 0016) SOP Class UID UI: MR Image Storage (0008, 0018) SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0008, 0020) Study Date DA: &#39;20150114&#39; (0008, 0021) Series Date DA: &#39;20150114&#39; (0008, 0022) Acquisition Date DA: &#39;20150114&#39; (0008, 0023) Content Date DA: &#39;20150114&#39; (0008, 0030) Study Time TM: &#39;132242&#39; (0008, 0031) Series Time TM: &#39;132628.00000&#39; (0008, 0032) Acquisition Time TM: &#39;132628.00&#39; (0008, 0033) Content Time TM: &#39;132628.00&#39; (0008, 0050) Accession Number SH: &#39;RJN78893652&#39; (0008, 0060) Modality CS: &#39;MR&#39; (0008, 0070) Manufacturer LO: &#39;Philips Medical Systems&#39; (0008, 0080) Institution Name LO: &#39;Macclesfield&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;WHITTINGHAM VM^-&#39; (0008, 1010) Station Name SH: &#39;PMSN-X6FNOVG0RR&#39; (0008, 1030) Study Description LO: &#39;MRI Head&#39; (0008, 1032) Procedure Code Sequence 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 103e) Series Description LO: &#39;T2W_TSE&#39; (0008, 1040) Institutional Department Name LO: &#39;MRI&#39; (0008, 1070) Operators&#39; Name PN: &#39;&#39; (0008, 1080) Admitting Diagnoses Description LO: &#39;&#39; (0008, 1090) Manufacturer&#39;s Model Name LO: &#39;Achieva&#39; (0008, 1111) Referenced Performed Procedure Step Sequence 1 item(s) - (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 1150) Referenced SOP Class UID UI: Modality Performed Procedure Step SOP Class (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.6788.2015011413224231041 (0020, 0013) Instance Number IS: &#39;0&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1406) [Unknown] SS: 0 (0008, 1140) Referenced Image Sequence 3 item(s) - (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255028693 (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255023690 (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255025691 (0009, 0000) Private Creator UL: 14 (0009, 0010) Private tag data LO: &#39;GEIIS&#39; (0010, 0010) Patient&#39;s Name PN: &#39;LIONHEART^WILLIAM&#39; (0010, 0020) Patient ID LO: &#39;RJN7270540X&#39; (0010, 0021) Issuer of Patient ID LO: &#39;RJN&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;19620726&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1000) Other Patient IDs LO: &#39;4824124506&#39; (0010, 1030) Patient&#39;s Weight DS: &#39;82.0&#39; (0010, 1040) Patient&#39;s Address LO: &#39;MARSHAM, START LANE, WHALEY BRIDGE, SK23 7BP&#39; (0010, 21c0) Pregnancy Status US: 4 (0018, 0015) Body Part Examined CS: &#39;HEAD&#39; (0018, 0020) Scanning Sequence CS: &#39;SE&#39; (0018, 0021) Sequence Variant CS: &#39;SK&#39; (0018, 0022) Scan Options CS: &#39;&#39; (0018, 0023) MR Acquisition Type CS: &#39;&#39; (0018, 0024) Sequence Name SH: &#39;&#39; (0018, 0050) Slice Thickness DS: &#39;5.0&#39; (0018, 0080) Repetition Time DS: &#39;3136.03076171875&#39; (0018, 0081) Echo Time DS: &#39;110.0&#39; (0018, 0083) Number of Averages DS: &#39;1.0&#39; (0018, 0084) Imaging Frequency DS: &#39;63.895818&#39; (0018, 0085) Imaged Nucleus SH: &#39;1H&#39; (0018, 0086) Echo Number(s) IS: &#39;1&#39; (0018, 0087) Magnetic Field Strength DS: &#39;1.5&#39; (0018, 0088) Spacing Between Slices DS: &#39;6.0&#39; (0018, 0089) Number of Phase Encoding Steps IS: &#39;173&#39; (0018, 0091) Echo Train Length IS: &#39;23&#39; (0018, 0093) Percent Sampling DS: &#39;75.0&#39; (0018, 0094) Percent Phase Field of View DS: &#39;79.6875&#39; (0018, 1000) Device Serial Number LO: &#39;12098&#39; (0018, 1020) Software Versions LO: [&#39;1.5.4&#39;, &#39;1.5.4.9&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;] (0018, 1030) Protocol Name LO: &#39;T2W_TSE&#39; (0018, 1081) Low R-R Value IS: &#39;0&#39; (0018, 1082) High R-R Value IS: &#39;0&#39; (0018, 1083) Intervals Acquired IS: &#39;0&#39; (0018, 1084) Intervals Rejected IS: &#39;0&#39; (0018, 1088) Heart Rate IS: &#39;0&#39; (0018, 1100) Reconstruction Diameter DS: &#39;240.0&#39; (0018, 1250) Receive Coil Name SH: &#39;Head&#39; (0018, 1251) Transmit Coil Name SH: &#39;B&#39; (0018, 1310) Acquisition Matrix US: [0, 256, 173, 0] (0018, 1312) In-plane Phase Encoding Direction CS: &#39;ROW&#39; (0018, 1314) Flip Angle DS: &#39;90.0&#39; (0018, 5100) Patient Position CS: &#39;HFS&#39; (0020, 000d) Study Instance UID UI: 1.2.840.113619.2.243.6074146108103184.41976.4343.2084088 (0020, 000e) Series Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413262801702 (0020, 0010) Study ID SH: &#39;474297762&#39; (0020, 0011) Series Number IS: &#39;201&#39; (0020, 0012) Acquisition Number IS: &#39;2&#39; (0020, 0013) Instance Number IS: &#39;7&#39; (0020, 0032) Image Position (Patient) DS: [-123.82818938791, -134.32321047782, -13.624799072742] (0020, 0037) Image Orientation (Patient) DS: [0.99935883283615, -0.0323828160762, 0.01527170091867, 0.03418818861246, 0.98977828025817, -0.1384561806917] (0020, 0052) Frame of Reference UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.5544.2015011413251448000 (0020, 0100) Temporal Position Identifier IS: &#39;1&#39; (0020, 0105) Number of Temporal Positions IS: &#39;1&#39; (0020, 1040) Position Reference Indicator LO: &#39;&#39; (0020, 1041) Slice Location DS: &#39;35.9999959546749&#39; (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0010) Rows US: 256 (0028, 0011) Columns US: 256 (0028, 0030) Pixel Spacing DS: [0.9375, 0.9375] (0028, 0034) Pixel Aspect Ratio IS: [1, 1] (0028, 0100) Bits Allocated US: 16 (0028, 0101) Bits Stored US: 12 (0028, 0102) High Bit US: 11 (0028, 0103) Pixel Representation US: 0 (0028, 1050) Window Center DS: &#39;308.513876454789&#39; (0028, 1051) Window Width DS: &#39;536.374216651745&#39; (0028, 2110) Lossy Image Compression CS: &#39;00&#39; (0032, 1032) Requesting Physician PN: &#39;WHITTINGHAM VM^-&#39; (0032, 1033) Requesting Service LO: &#39;Unspecified&#39; (0032, 1060) Requested Procedure Description LO: &#39;MRI Head&#39; (0040, 0241) Performed Station AE Title AE: &#39;RJN71PHMR01&#39; (0040, 0244) Performed Procedure Step Start Date DA: &#39;20150114&#39; (0040, 0245) Performed Procedure Step Start Time TM: &#39;132242&#39; (0040, 0250) Performed Procedure Step End Date DA: &#39;20150114&#39; (0040, 0251) Performed Procedure Step End Time TM: &#39;132242&#39; (0040, 0253) Performed Procedure Step ID SH: &#39;474297762&#39; (0040, 0254) Performed Procedure Step Descriptio LO: &#39;MRI Head&#39; (0040, 0260) Performed Protocol Code Sequence 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 010b) Context Group Extension Flag CS: &#39;N&#39; (0040, 0275) Request Attributes Sequence 1 item(s) - (0040, 1001) Requested Procedure ID SH: &#39;RJN78893652&#39; (0040, 0321) Film Consumption Sequence 0 item(s) - (0040, 2017) Filler Order Number / Imaging Servi LO: &#39;77706562&#39; (0903, 0010) Private Creator LO: &#39;GEIIS PACS&#39; (0903, 1010) [Reject Image Flag] US: 0 (0903, 1011) [Significant Flag] US: 0 (0903, 1012) [Confidential Flag] US: 0 (0905, 0010) Private Creator LO: &#39;GEIIS&#39; (0905, 1030) [Assigning Authority For Patient ID LO: &#39;RJN&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 0090) Private Creator LO: &#39;Philips Imaging DD 129&#39; (2001, 1001) [Chemical Shift] FL: 0.0 (2001, 1002) [Chemical Shift Number MR] IS: &#39;0&#39; (2001, 1003) [Diffusion B-Factor] FL: 0.0 (2001, 1006) [Image Enhanced] CS: &#39;N&#39; (2001, 1007) [Image Type ED ES] CS: &#39;U&#39; (2001, 1008) [Phase Number] IS: &#39;1&#39; (2001, 1009) [Unknown] FL: 0.0 (2001, 100a) [Slice Number MR] IS: &#39;7&#39; (2001, 100b) [Slice Orientation] CS: &#39;TRANSVERSAL&#39; (2001, 100c) [Unknown] CS: &#39;N&#39; (2001, 100e) [Unknown] CS: &#39;N&#39; (2001, 100f) [Unknown] SS: 0 (2001, 1010) [Cardiac Sync] CS: &#39;NO&#39; (2001, 1011) [Diffusion Echo Time] FL: 0.0 (2001, 1012) [Dynamic Series] CS: &#39;N&#39; (2001, 1013) [EPI Factor] SL: 1 (2001, 1014) [Number of Echoes] SL: 1 (2001, 1015) [Number of Locations] SS: 1 (2001, 1016) [Number of PC Directions] SS: 0 (2001, 1017) [Number of Phases MR] SL: 1 (2001, 1018) [Number of Slices MR] SL: 27 (2001, 1019) [Partial Matrix Scanned] CS: &#39;N&#39; (2001, 101a) [PC Velocity] FL: [0.0, 0.0, 0.0] (2001, 101b) [Prepulse Delay] FL: 0.0 (2001, 101c) [Prepulse Type] CS: &#39;NO&#39; (2001, 101d) [Reconstruction Number MR] IS: &#39;1&#39; (2001, 101f) [Respiration Sync] CS: &#39;NO&#39; (2001, 1020) [Scanning Technique Description MR] LO: &#39;TSE&#39; (2001, 1021) [SPIR] CS: &#39;N&#39; (2001, 1022) [Water Fat Shift] FL: 1.3013890981674194 (2001, 1023) [Flip Angle Philips] DS: &#39;90.0&#39; (2001, 1024) [Interactive] CS: &#39;N&#39; (2001, 1025) [Echo Time Display MR] SH: &#39;110&#39; (2001, 105f) Private tag data 1 item(s) - (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 102d) [Number of Stack Slices] SS: 27 (2001, 1032) [Stack Radial Angle] FL: 0.0 (2001, 1033) [Stack Radial Axis] CS: &#39;AP&#39; (2001, 1035) [Stack Slice Number] SS: 1 (2001, 1036) [Stack Type] CS: &#39;PARALLEL&#39; (2005, 0010) Private Creator LO: &#39;Philips MR Imaging DD 001&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 1071) [Unknown] FL: -0.6091800332069397 (2005, 1072) [Unknown] FL: -1.9593315124511719 (2005, 1073) [Unknown] FL: -7.9840474128723145 (2005, 1074) [Unknown] FL: 240.0 (2005, 1075) [Unknown] FL: 161.0 (2005, 1076) [Unknown] FL: 191.25 (2005, 1078) [Unknown] FL: -13.602395057678223 (2005, 1079) [Unknown] FL: 13.183597564697266 (2005, 107a) [Unknown] FL: -0.24909068644046783 (2005, 107b) [Unknown] CS: &#39;RL&#39; (2005, 107e) [Unknown] FL: 6.0 (2005, 1081) [Unknown] CS: &#39;FH&#39; (2005, 10a3) [Unknown] IS: &#39;7&#39; (2005, 10a4) [Unknown] IS: &#39;0&#39; (2005, 10a5) [Unknown] IS: &#39;0&#39; (2005, 10a6) [Unknown] IS: &#39;1&#39; (2005, 10a7) [Unknown] CS: &#39;DEFAULT&#39; (2005, 1390) [Unknown] CS: &#39;R_A&#39; (2001, 1060) [Number of Stacks] SL: 1 (2001, 1061) [Unknown] CS: &#39;N&#39; (2001, 1062) [Unknown] CS: &#39;N&#39; (2001, 1063) [Examination Source] CS: &#39;ELSEWHERE&#39; (2001, 106e) [Series Type] SH: &#39;MRSERIES&#39; (2001, 107b) [Acquisition Number] IS: &#39;2&#39; (2001, 1081) [Number of Dynamic Scans] IS: &#39;1&#39; (2001, 1082) [Echo Train Length] IS: &#39;0&#39; (2001, 1083) [Imaging Frequency] DS: &#39;63.895818&#39; (2001, 1084) [Inversion Time] DS: &#39;0.0&#39; (2001, 1085) [Magnetic Field Strength] DS: &#39;1.5&#39; (2001, 1086) [Unknown] IS: &#39;0&#39; (2001, 1087) [Imaged Nucleus] SH: &#39;1H&#39; (2001, 1088) [Number of Averages] DS: &#39;1.0&#39; (2001, 1089) [Phase FOV Percent] DS: &#39;0.0&#39; (2001, 108a) [Sampling Percent] DS: &#39;0.0&#39; (2001, 108b) [Unknown] SH: &#39;B&#39; (2001, 10c8) Private tag data LO: &#39;*FAST BRAIN&#39; (2001, 9000) Private tag data 1 item(s) - (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 0016) SOP Class UID UI: Grayscale Softcopy Presentation State Storage (0008, 0018) SOP Instance UID UI: 1.3.46.670589.11.0.0.51.4.3.0.12098.1.3104.1421242179546 (0008, 1115) Referenced Series Sequence 1 item(s) - (0008, 1140) Referenced Image Sequence 1 item(s) - (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0020, 000e) Series Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413262801702 (0018, 1622) Shutter Presentation Value US: 0 (0020, 0013) Instance Number IS: &#39;1&#39; (0028, 3002) LUT Descriptor US: [0, 0, 0] (0028, 3003) LUT Explanation LO: &#39;&#39; (0028, 3006) LUT Data US: 0 (0028, 3110) Softcopy VOI LUT Sequence 1 item(s) - (0028, 1050) Window Center DS: &#39;1094.0&#39; (0028, 1051) Window Width DS: &#39;1902.0&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 1053) [Window Invert] CS: &#39;N&#39; (2001, 1077) [GL TrafoType] CS: &#39;LINEARVOI&#39; (0070, 005a) Displayed Area Selection Sequence 1 item(s) - (0070, 0052) Displayed Area Top Left Hand Corner SL: [1, 1] (0070, 0053) Displayed Area Bottom Right Hand Co SL: [256, 256] (0070, 0100) Presentation Size Mode CS: &#39;SCALE TO FIT&#39; (0070, 0102) Presentation Pixel Aspect Ratio IS: [1, 1] (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 103f) [Interpolation Method] CS: &#39;BI_CUBIC&#39; (0070, 0080) Content Label CS: &#39;AS LAST SEEN&#39; (0070, 0081) Content Description LO: &#39;&#39; (0070, 0082) Presentation Creation Date DA: &#39;20150114&#39; (0070, 0083) Presentation Creation Time TM: &#39;132727&#39; (0070, 0084) Content Creator&#39;s Name PN: &#39;Achieva&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 0090) Private Creator LO: &#39;Philips Imaging DD 129&#39; (2001, 1026) [Presentation State Subtraction Act CS: &#39;N&#39; (2001, 1067) [Unknown] CS: &#39;&#39; (2001, 1068) Private tag data 1 item(s) - (0028, 1052) Rescale Intercept DS: &#39;0.0&#39; (0028, 1053) Rescale Slope DS: &#39;3.54603174603175&#39; (0028, 1054) Rescale Type LO: &#39;normalized&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 1077) [GL TrafoType] CS: &#39;LINEARMODALITY&#39; (2001, 1077) [GL TrafoType] CS: &#39;L_PRESENTATION&#39; (2001, 109f) [Pixel Processing Kernel Size] US: [0, 0] (2001, 9000) Private tag data 0 item(s) - (2005, 0012) Private Creator LO: &#39;Philips MR Imaging DD 003&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1234) [Unknown] SL: 0 (2005, 1257) [Unknown] SS: 0 (2005, 1281) [Unknown] UI: &#39;&#39; (2005, 1282) [Unknown] CS: &#39;&#39; (2005, 1389) Private tag data 0 item(s) - (2005, 1406) [Unknown] SS: 0 (2050, 0020) Presentation LUT Shape CS: &#39;IDENTITY&#39; (2005, 0010) Private Creator LO: &#39;Philips MR Imaging DD 001&#39; (2005, 0011) Private Creator LO: &#39;Philips MR Imaging DD 002&#39; (2005, 0012) Private Creator LO: &#39;Philips MR Imaging DD 003&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1000) [Unknown] FL: -0.6091800332069397 (2005, 1001) [Unknown] FL: -1.9593315124511719 (2005, 1002) [Unknown] FL: -7.984046936035156 (2005, 1004) [Unknown] CS: &#39;NONE&#39; (2005, 1008) [Unknown] FL: -19.435754776000977 (2005, 1009) [Unknown] FL: -28.406936645507812 (2005, 100a) [Unknown] FL: 0.19745318591594696 (2005, 100b) [Unknown] FL: 79173.09375 (2005, 100c) [Unknown] FL: 5.142798900604248 (2005, 100d) [Unknown] FL: 0.0 (2005, 100e) [Unknown] FL: 0.009394234046339989 (2005, 100f) [Window Center] DS: &#39;1094.0&#39; (2005, 1010) [Window Width] DS: &#39;1902.0&#39; (2005, 1011) [Unknown] CS: &#39;M&#39; (2005, 1012) [Unknown] CS: &#39;N&#39; (2005, 1013) [Unknown] CS: &#39;NO&#39; (2005, 1014) [Unknown] CS: &#39;N&#39; (2005, 1015) [Unknown] CS: &#39;N&#39; (2005, 1016) [Unknown] CS: &#39;N&#39; (2005, 1017) [Unknown] CS: &#39;N&#39; (2005, 1019) [Unknown] CS: &#39;N&#39; (2005, 101a) [Unknown] SS: 0 (2005, 101b) [Unknown] CS: &#39;N&#39; (2005, 101c) [Unknown] CS: &#39;N&#39; (2005, 101d) [Unknown] SS: 256 (2005, 101e) [Unknown] SH: &#39;compose&#39; (2005, 101f) [Unknown] SH: &#39;compose&#39; (2005, 1020) [Number of Chemical Shift] SL: 0 (2005, 1021) [Unknown] SS: 1 (2005, 1022) [Unknown] IS: &#39;0&#39; (2005, 1023) [Unknown] SS: 0 (2005, 1025) [Unknown] SS: 0 (2005, 1026) [Unknown] CS: &#39;N&#39; (2005, 1027) [Unknown] CS: &#39;MINIMUM&#39; (2005, 1028) [Unknown] CS: &#39;N&#39; (2005, 1029) [Unknown] CS: &#39;N&#39; (2005, 102a) [Unknown] IS: &#39;486048324&#39; (2005, 102b) [Unknown] SS: 100 (2005, 102c) [Unknown] CS: &#39;N&#39; (2005, 102d) [Unknown] IS: &#39;0&#39; (2005, 102e) [Unknown] CS: &#39;N&#39; (2005, 102f) [Unknown] CS: &#39;N&#39; (2005, 1030) [Repetition Time] FL: 3136.03076171875 (2005, 1031) [Unknown] CS: &#39;N&#39; (2005, 1033) [Acquisition Duration] FL: 43.9044303894043 (2005, 1034) [Unknown] CS: &#39;Y&#39; (2005, 1035) [Unknown] CS: &#39;PIXEL&#39; (2005, 1036) [Unknown] CS: &#39;N&#39; (2005, 1037) [Unknown] CS: &#39;N&#39; (2005, 1038) [Unknown] CS: &#39;N&#39; (2005, 1039) [Unknown] CS: &#39;N&#39; (2005, 103b) [Unknown] CS: &#39;N&#39; (2005, 103c) [Unknown] CS: &#39;N&#39; (2005, 103d) [Unknown] SS: 102 (2005, 103e) [Unknown] SL: Array of 102 elements (2005, 105f) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1060) [Unknown] IS: &#39;-1&#39; (2005, 1061) [Unknown] CS: &#39;NO&#39; (2005, 1063) [Unknown] SS: 0 (2005, 106e) [Unknown] CS: &#39;SE&#39; (2005, 106f) [Unknown] CS: &#39;MS&#39; (2005, 1080) Private tag data 0 item(s) - (2005, 1083) Private tag data 0 item(s) - (2005, 1084) Private tag data 0 item(s) - (2005, 1085) Private tag data 0 item(s) - (2005, 1086) [Unknown] SS: 0 (2005, 109e) Private tag data 0 item(s) - (2005, 10a0) [Unknown] FL: 0.0 (2005, 10a2) [Unknown] CS: &#39;N&#39; (2005, 10a8) [Unknown] DS: &#39;0.0&#39; (2005, 10a9) [Unknown] CS: &#39;NONE&#39; (2005, 10b0) [Diffusion Direction RL] FL: 0.0 (2005, 10b1) [Diffusion Direction AP] FL: 0.0 (2005, 10b2) [Diffusion Direction FH] FL: 0.0 (2005, 10c0) [Unknown] CS: &#39;SE&#39; (2005, 1199) [Unknown] UL: 1 (2005, 1200) [Unknown] UL: 1 (2005, 1201) [Unknown] UL: 0 (2005, 1213) [Unknown] UL: 1 (2005, 1245) [Unknown] SS: 2 (2005, 1249) [Unknown] SS: 0 (2005, 1251) [Unknown] SS: 0 (2005, 1252) [Unknown] SS: 1 (2005, 1253) [Unknown] SS: 1 (2005, 1325) [Unknown] CS: &#39;N&#39; (2005, 1326) [Unknown] FL: 0.0 (2005, 1327) [Unknown] CS: &#39;REAL&#39; (2005, 1328) [Unknown] CS: &#39;ORIGINAL&#39; (2005, 1329) [Unknown] FL: 50.0 (2005, 1330) [Unknown] CS: [&#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;] (2005, 1331) [Unknown] SS: 0 (2005, 1333) [Unknown] FL: [0.0, 0.0, 0.0] (2005, 1334) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1335) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1336) [Unknown] FL: 0.0 (2005, 1337) [Unknown] FL: 0.0 (2005, 1338) [Unknown] FL: 0.0 (2005, 1339) [Unknown] SS: [0, 0] (2005, 1340) [Unknown] CS: &#39;PRE_FT&#39; (2005, 1341) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1342) [Unknown] CS: &#39;FID&#39; (2005, 1343) [Unknown] CS: &#39;Y&#39; (2005, 1344) [Unknown] SS: Array of 40 elements (2005, 1345) [Unknown] CS: &#39;NO&#39; (2005, 1346) [Unknown] CS: &#39;HERTZ&#39; (2005, 1347) [Unknown] FL: 0.0 (2005, 1348) [Unknown] CS: &#39;OFF&#39; (2005, 1349) [Unknown] FL: 0.0 (2005, 1350) [Unknown] FL: [0.0, 0.0] (2005, 1351) [Unknown] SS: 0 (2005, 1352) [Unknown] SS: 0 (2005, 1355) [Unknown] FL: Array of 30 elements (2005, 1356) [Unknown] CS: &#39;NO&#39; (2005, 1357) [Unknown] SS: 0 (2005, 1359) [Unknown] FL: 1.0 (2005, 1360) [Unknown] FL: 0.0 (2005, 1361) [Unknown] FL: [0.0, 0.0] (2005, 1362) [Unknown] FL: 0.0 (2005, 1363) [Unknown] FL: 0.0 (2005, 1364) [Unknown] CS: &#39;NO&#39; (2005, 1370) [Unknown] SS: 0 (2005, 1371) Private tag data 0 item(s) - (2005, 1381) [Unknown] IS: &#39;3&#39; (2005, 1382) [Unknown] UL: 1 (2005, 1391) [Unknown] PN: &#39;&#39; (2005, 1392) [Unknown] IS: &#39;0&#39; (2005, 1393) [Unknown] IS: &#39;-1&#39; (2005, 1396) [Unknown] CS: &#39;NO&#39; (2005, 1397) [Unknown] LO: &#39;SNM3.T-D1100.Head&#39; (2005, 1398) [Unknown] CS: &#39;NO&#39; (2005, 1399) [Unknown] CS: &#39;NO&#39; (2005, 1400) [Unknown] CS: &#39;YES&#39; (2005, 1401) [Unknown] UL: 1 (2005, 1402) Private tag data 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0103) Coding Scheme Version SH: &#39;&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 010b) Context Group Extension Flag CS: &#39;N&#39; (0008, 010d) Context Group Extension Creator UID UI: &#39;&#39; (2005, 1403) [Unknown] UL: 1 (2005, 1406) [Unknown] SS: 0 (2005, 1409) [Unknown] DS: &#39;0.0&#39; (2005, 140a) [Unknown] DS: &#39;3.54603174603174&#39; (2005, 140b) [Unknown] LO: &#39;normalized&#39; (2050, 0020) Presentation LUT Shape CS: &#39;IDENTITY&#39; (3109, 0010) Private Creator LO: &#39;Applicare/RadWorks/Version 5.0&#39; (3109, 0011) Private Creator LO: &#39;Applicare/RadWorks/Version 6.0/Summary&#39; (3109, 1002) [NEW/SEEN Status] SH: &#39;NEW&#39; (3109, 1008) [Receive Origin] LO: &#39;192.168.210.54&#39; (3109, 100a) [Receive Date] DA: &#39;20150114&#39; (3109, 100b) [Receive Time] TM: &#39;135015&#39; (3109, 1112) [Receive Origin Description] ST: &#39;RJNDAS54&#39; (7fd1, 0000) Private Creator UL: 26 (7fd1, 0010) Private tag data LO: &#39;GEIIS&#39; (7fd1, 1010) [GE IIS Compression ID] UL: 0 (7fe0, 0000) Group Length UL: 131084 (7fe0, 0010) Pixel Data OW: Array of 131072 elements . . We can also plot this slice. . Now we will read these files by using the read_file method and append them to a list. . full_mri = [] for i in all_files: data = pydicom.read_file(i) full_mri.append(data) print(f&quot;There are {len(full_mri)} slices in our MRI.&quot;) . There are 27 slices in our MRI. . . Important: Pay attention! This is important. . While appending slices in full_mri list we appended them in random fashion. All the slices should be in right order. To view the slice location of the MRI we can use SliceLocation. The current slice order is radndom and can be verified by inspecting the SliceLocation shown below: . for i in full_mri: print(i.SliceLocation) . 113.999995959439 77.9999962275740 107.999995419197 11.9999973042441 59.9999962290673 101.999994745866 29.9999952815023 155.999992554172 119.999996566542 83.9999967682912 149.999999502083 41.9999963629367 17.9999979772582 137.999998321624 35.9999959546749 47.9999970362677 131.999997780749 71.9999961590453 5.99999663091323 143.999998928727 89.9999955528687 95.9999960937442 0.0 65.9999961939969 53.9999958207213 23.9999946081714 125.999997173645 . . It is crucial to order them, otherwise the scan will be shuffled for no reason and can be a problem for visualization and for further analysis. . To correct this, we will sort the mri_data list using the SliceLocation. This can be done by the following code: . mri_data_ordered = sorted(full_mri, key=lambda x: x.SliceLocation) . Corrected MRI Slice Order: . for i in mri_data_ordered: print(i.SliceLocation) . 0.0 5.99999663091323 11.9999973042441 17.9999979772582 23.9999946081714 29.9999952815023 35.9999959546749 41.9999963629367 47.9999970362677 53.9999958207213 59.9999962290673 65.9999961939969 71.9999961590453 77.9999962275740 83.9999967682912 89.9999955528687 95.9999960937442 101.999994745866 107.999995419197 113.999995959439 119.999996566542 125.999997173645 131.999997780749 137.999998321624 143.999998928727 149.999999502083 155.999992554172 . . Now, lets move ahead and extract the actual Image data from the mri_data list. We will again use the .pixel_array to get the image content of the slice and then append it to the full_volume list. . full_volume = [] for slice in mri_data_ordered: full_volume.append(slice.pixel_array) full_volume = np.array(full_volume) . Lets print the shape! . print(full_volume.shape) . (27, 256, 256) . And now we can have look at few slices of the 3D Volume. We can plot this both in 2D and 3D way. . Animated GIF! . Your browser does not support the video tag. NIfTI . . What are NIfTI files? . Another popular and widely used data file extension in medical imaging is NIfTI. It is an acronym for Neuroimaging Informatics Technology Initiative. These are open file formats for the storage of medical image data. They were initially used for neuroimaging, a branch of medical imaging that focuses on the brain, but are now used for other radiological images too. . NIfTI Structure . Similar to DICOM files, NIfTI files have two components those are Header and Body. The header contains the metadata, but unlike DICOM files, the header of NIfTI has only necessary metadata. The body of NIfTI contains the actual image data(2D, 3D, 4D, etc.) | NIfTI files are more popular in research settings than in hospital standards. | File extension is “.nii” or “.nii-gz”. The prior extension refers to a compressed version. | In general they are easier to handle. | . You can read more about NIfTI files here. . How to read NIfTI file? . There are multiple python libraries that can handle NIfTI files. We will use Nibabel for our purpose. Lets start with some imports, remember you can run all this code as ipynb notebook on google colab or binder by just clicking &quot;run on colab&quot;, present on top of this page. . import nibabel as nib import matplotlib.pyplot as plt import numpy as np from pathlib import Path . We can read the NIfTI file in nibabel using nib.load(path) function. . path2nifti = &quot;./blog_1_data/BraTS20_Training_001_flair.nii&quot; mri_nifti = nib.load(path2nifti) . Just like DICOM files NIfTI files also carries metadata but only the necessary one. To access the metadata, we can print the NIfTI file. Click on Show Output to see the output. . print(mri_nifti); . &lt;class &#39;nibabel.nifti1.Nifti1Image&#39;&gt; data shape (240, 240, 155) affine: [[ -1. -0. -0. 0.] [ -0. -1. -0. 239.] [ 0. 0. 1. 0.] [ 0. 0. 0. 1.]] metadata: &lt;class &#39;nibabel.nifti1.Nifti1Header&#39;&gt; object, endian=&#39;&lt;&#39; sizeof_hdr : 348 data_type : b&#39;&#39; db_name : b&#39;&#39; extents : 0 session_error : 0 regular : b&#39;r&#39; dim_info : 0 dim : [ 3 240 240 155 1 1 1 1] intent_p1 : 0.0 intent_p2 : 0.0 intent_p3 : 0.0 intent_code : none datatype : int16 bitpix : 16 slice_start : 0 pixdim : [1. 1. 1. 1. 0. 0. 0. 0.] vox_offset : 0.0 scl_slope : nan scl_inter : nan slice_end : 0 slice_code : unknown xyzt_units : 2 cal_max : 0.0 cal_min : 0.0 slice_duration : 0.0 toffset : 0.0 glmax : 0 glmin : 0 descrip : b&#39;&#39; aux_file : b&#39;&#39; qform_code : scanner sform_code : scanner quatern_b : 0.0 quatern_c : 0.0 quatern_d : 1.0 qoffset_x : 0.0 qoffset_y : 239.0 qoffset_z : 0.0 srow_x : [-1. -0. -0. 0.] srow_y : [ -0. -1. -0. 239.] srow_z : [0. 0. 1. 0.] intent_name : b&#39;&#39; magic : b&#39;n+1&#39; . . Each entry is accessible by using header object in the NIfTI. . print(mri_nifti.header[&#39;qoffset_y&#39;]) print(mri_nifti.header[&#39;sizeof_hdr&#39;]) print(mri_nifti.header[&#39;pixdim&#39;]) . 239.0 348 [1. 1. 1. 1. 0. 0. 0. 0.] . . We can find the shape of image data using .shape . print(&quot;Shape of MRI:&quot;, mri_nifti.shape) . Shape of MRI: (240, 240, 155) . After going through the metadata lets access the actual(image) data from the NIfTI file. This is done using the get_fdata. Just like in dicom files the image data stored is a Numpy array. We can print the size and type. . mri_image_data = mri_nifti.get_fdata() print(&quot;Type of MRI Image data:&quot;, type(mri_image_data)) print(&quot;Shape of MRI Array:&quot;, mri_image_data.shape) . Type of MRI Image data: &lt;class &#39;numpy.memmap&#39;&gt; Shape of MRI Array: (240, 240, 155) . Lets plot the Image data. As the image is an MRI(3D) we have to plot it as GIF. . Your browser does not support the video tag. Affine Array and Orientation . All these Medical images(CT scans, MRI, X-RAYs) are represenation of some reference space to digital space. An affine array is an array that tells you the position of the image array data in a reference space. Discussion about the affine matrix is out of the scope of this blog. But I would strongly recommend you to read this article on the coordinate systems and affine for more information. Another great blog will be Understanding coordinate systems and DICOM for deep learning medical image analysis by Nikolas Adaloglou. . To access the affine array of the medical image in NIfTI, we use .affine command. . print(&quot;The affine Matrix of the MRI Image: n&quot;, mri_nifti.affine) . The affine Matrix of the MRI Image: [[ -1. -0. -0. 0.] [ -0. -1. -0. 239.] [ 0. 0. 1. 0.] [ 0. 0. 0. 1.]] . Through this Affine Array we can access the orinetation of our Medical imaging data in coordicate space. This can be done using nib.aff2axcodes(Affine Array) . print(&quot;Orientation of MRI Image:&quot;, nib.aff2axcodes(mri_nifti.affine)) . Orientation of MRI Image: (&#39;L&#39;, &#39;P&#39;, &#39;S&#39;) . The orientation of Image can be &quot;LPS&quot; or &quot;RAS&quot;. The meaning of them are as follows: . Later in pre-processing steps while building Machine/Deep Learning model we ensure that all the data we are geting is of same orientation. Usually the problem of jumble orientation among medical images happen when the data is from multiple sources/scanners. . DICOM to NIfTI Conversion . NIfTI files are easy to handle as compared to DICOM files, especially in the case of 3D data. In DICOM, usually, 3D data is stored in multiple files, where each file represents one slice of the data. Therefore it makes them difficult to handle. . In this section, we will learn how to convert DICOM to NIfTI using another python library called dicom2nifti. This library is straightforward and easy to use. . First we will import the library and define the path to dicom directory. . import dicom2nifti path2dicom = &quot;./blog_1_data/SE000001/&quot; . To covert the dicom2nifti we will use .convert_directory(path_to_dicom, save_directory) function that take two inputs, path of dicom and save directory. . dicom2nifti.convert_directory(path2dicom, &quot;./blog_1_data/&quot;) . We can further confirm the conversion by reading the converted file using nibabel. . path2nifti_from_dicom = &quot;./blog_1_data/201_t2w_tse.nii.gz&quot; nifti_from_dicom = nib.load(path2nifti_from_dicom) print(nifti_from_dicom) print(nifti_from_dicom.shape) . &lt;class &#39;nibabel.nifti1.Nifti1Image&#39;&gt; data shape (256, 256, 27) affine: [[-9.36898887e-01 3.20514254e-02 6.37919828e-02 1.15272324e+02] [ 3.03588901e-02 9.27917123e-01 -8.33337128e-01 -9.72956390e+01] [ 1.43172191e-02 1.29802674e-01 5.94150448e+00 -8.23735046e+01] [ 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.00000000e+00]] metadata: &lt;class &#39;nibabel.nifti1.Nifti1Header&#39;&gt; object, endian=&#39;&lt;&#39; sizeof_hdr : 348 data_type : b&#39;&#39; db_name : b&#39;&#39; extents : 0 session_error : 0 regular : b&#39;&#39; dim_info : 0 dim : [ 3 256 256 27 1 1 1 1] intent_p1 : 0.0 intent_p2 : 0.0 intent_p3 : 0.0 intent_code : none datatype : uint16 bitpix : 16 slice_start : 0 pixdim : [-1. 0.9375 0.9375 5.9999995 1. 1. 1. 1. ] vox_offset : 0.0 scl_slope : nan scl_inter : nan slice_end : 0 slice_code : unknown xyzt_units : 2 cal_max : 0.0 cal_min : 0.0 slice_duration : 0.0 toffset : 0.0 glmax : 0 glmin : 0 descrip : b&#39;&#39; aux_file : b&#39;&#39; qform_code : unknown sform_code : aligned quatern_b : -0.016685799 quatern_c : -0.9974202 quatern_d : -0.069515765 qoffset_x : 115.27232 qoffset_y : -97.29564 qoffset_z : -82.373505 srow_x : [-9.3689889e-01 3.2051425e-02 6.3791983e-02 1.1527232e+02] srow_y : [ 3.035889e-02 9.279171e-01 -8.333371e-01 -9.729564e+01] srow_z : [ 1.4317219e-02 1.2980267e-01 5.9415045e+00 -8.2373505e+01] intent_name : b&#39;&#39; magic : b&#39;n+1&#39; (256, 256, 27) . . Writing NIfTI files . Nibabel also provide us with function to save an data into NIfTI format. This is usefull when you want to perform some pre-processing and then later save it back to NIfTI. In below example, we will load a NIfTI image and perform some simple processing and then save it back to &quot;.nii-gz&quot; format. . We will perform simple threasholding using the following code and then plot them. . nifti_from_dicom_data = nifti_from_dicom.get_fdata() new_nifti_data = nifti_from_dicom_data * (nifti_from_dicom_data &gt; 300) . To convert the image data into NIfTI file, we have to use affine array along with new image data. We will use nib.Nifti1Image(new_image_Data, affine_array). We will later save the file using nib.save(nifti_file, path). . processed_nifti = nib.Nifti1Image(new_nifti_data, nifti_from_dicom.affine) nib.save(processed_nifti, &#39;./blog_1_data/201_t2w_tse_processed.nii.gz&#39;) . Congratulations! You made it! Now you understand how to read most popular medical imaging formats(DICOM and NIfTI). By following this notebook you also learned how to manipulate and visualize these images. . References . Nibabel: https://nipy.org/nibabel/coordinate_systems.html | Dataset: https://www.kaggle.com/datasets/awsaf49/brats20-dataset-training-validation | pyDicom: https://pydicom.github.io/ | Dataset: https://www.kaggle.com/kmader/siim-medical-images?select=dicom_dir | . About Me: . I am Akansh maurya, working as a post-bacc at Robert Bosch Center of Data Science and AI, Indian Institute of Technology(IIT), Madras. . Follow @akansh_maurya . Consider joining our Slack channel for discussion, tutorials, talks and, new research in Deep learning and Medical Imaging. .",
            "url": "https://akansh12.github.io/confession-of-a-coding-freak/tutorial/2022/05/17/Pre-processing-Medical-Images-for-Deep-Learning-Models.html",
            "relUrl": "/tutorial/2022/05/17/Pre-processing-Medical-Images-for-Deep-Learning-Models.html",
            "date": " • May 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Reading Medical Imaging data types",
            "content": "About . The seemingly intimidating journey of the Application of AI in Medical Imaging starts with dealing with peculiar file formats. In this blog, we will deal with two data formats that you will deal with more than ninety percent of the time, DICOM and NIFTI. . Unlike other typical formats of images like JPEG, and PNG the Medical imaging community uses a different format(DICOM and NIFTI) because of certain reasons. Medical Images (X-Rays, MRI, CT scans) are generally generated in Hospitals or Scan Centers. Other than image data the scan center collects some other metadata of the subject, this includes gender, age, name, body part examined, etc(We will discuss in a later section). So to share both of these data, Image data and metadata, with researcher like us there exist a standardized data format. DICOM and Nifti are the most common among them. . . Consider this blog more like a tutorial that will help you to get familiar with the tools used to read-open-write medical imaging files. As this blog is written using fastpages, you can run this whole tutorial and associated code as a Jupyter notebook. . DICOM . What are DICOM files? . According to the Wikipedia, they are: . Digital Imaging and Communications in Medicine (DICOM) is the standard for the communication and management of medical imaging information and related data.DICOM is most commonly used for storing and transmitting medical images enabling the integration of medical imaging devices such as scanners, servers, workstations, printers, network hardware, and picture archiving and communication systems (PACS) from multiple manufacturers. It has been widely adopted by hospitals and is making inroads into smaller applications such as dentists&#39; and doctors&#39; offices. . In summary: . Store Medical image data(Body) + Metadata(Header) associated with it. | Used for communication between Medical Imaging devices. | Widely used in Hospital Atmosphere. | . DICOM Structure . How to Read DICOM files? . We will be using Pydicom a python library to read DICOM files. . Lets start with some imports, remember you can run all this code as ipynb notebook on google colab or binder by just clicking &quot;run on colab&quot;, present on top of this page. . Importing: . pydicom: For reading DICOM files. | matplotlib.pyplot: To plot Medical Images. | numpy: For array manipulation. | pathlib: For easy path handling. | . import pydicom import matplotlib.pyplot as plt import numpy as np from pathlib import Path . 2-Dimensional(2D) Data . DICOM files can have multiple extentions like .dicom or .dcm. In our case we have .dcm as an extention. Reading a single file .dcm file using pydicom.read_file(path) function. . path2dicom = &quot;./blog_1_data/ID_0000_AGE_0060_CONTRAST_1_CT(1).dcm&quot; dicom_file = pydicom.read_file(path2dicom) . As discussed in the earlier sections, DICOM files are a combination of medical image data and metadata. To access all the metadata, we can print the DICOM files. Click on Show Output to see the print output. . print(dicom_file) . Dataset.file_meta - (0002, 0000) File Meta Information Group Length UL: 194 (0002, 0001) File Meta Information Version OB: b&#39; x00 x01&#39; (0002, 0002) Media Storage SOP Class UID UI: CT Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.108821836759549281694712274169 (0002, 0010) Transfer Syntax UID UI: Implicit VR Little Endian (0002, 0012) Implementation Class UID UI: 1.2.40.0.13.1.1.1 (0002, 0013) Implementation Version Name SH: &#39;dcm4che-1.4.31&#39; - (0008, 0000) Group Length UL: 430 (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0008) Image Type CS: [&#39;ORIGINAL&#39;, &#39;PRIMARY&#39;, &#39;AXIAL&#39;] (0008, 0016) SOP Class UID UI: CT Image Storage (0008, 0018) SOP Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.108821836759549281694712274169 (0008, 0020) Study Date DA: &#39;19830708&#39; (0008, 0021) Series Date DA: &#39;19830708&#39; (0008, 0022) Acquisition Date DA: &#39;19830708&#39; (0008, 0023) Content Date DA: &#39;19830708&#39; (0008, 0030) Study Time TM: &#39;085723.000000&#39; (0008, 0031) Series Time TM: &#39;090344.332000&#39; (0008, 0032) Acquisition Time TM: &#39;090517.558000&#39; (0008, 0033) Content Time TM: &#39;090501.593000&#39; (0008, 0040) Data Set Type US: 0 (0008, 0041) Data Set Subtype LO: &#39;IMA SPI&#39; (0008, 0050) Accession Number SH: &#39;2819497684894126&#39; (0008, 0060) Modality CS: &#39;CT&#39; (0008, 0070) Manufacturer LO: &#39;SIEMENS&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;&#39; (0008, 1010) Station Name SH: &#39;&#39; (0008, 1090) Manufacturer&#39;s Model Name LO: &#39;SOMATOM PLUS 4&#39; (0008, 2111) Derivation Description ST: &#39;&#39; (0009, 0000) Private Creator UN: b&#39; x86 x00 x00 x00&#39; (0009, 0010) Private tag data LO: &#39;SPI RELEASE 1&#39; (0009, 0012) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0009, 0013) Private tag data LO: &#39;SIEMENS CM VA0 LAB&#39; (0009, 0020) Private tag data LO: &#39;SIEMENS CT VA0 IDE&#39; (0009, 0030) Private tag data LO: &#39;SIEMENS CT VA0 ORI&#39; (0010, 0000) Group Length UL: 70 (0010, 0010) Patient&#39;s Name PN: &#39;TCGA-17-Z034&#39; (0010, 0020) Patient ID LO: &#39;TCGA-17-Z034&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1010) Patient&#39;s Age AS: &#39;060Y&#39; (0011, 0000) Private Creator UN: b&#39;F x00 x00 x00&#39; (0011, 0010) Private tag data LO: &#39;SPI RELEASE 1&#39; (0011, 0011) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0011, 0012) Private tag data LO: &#39;SIEMENS ISI&#39; (0012, 0000) Group Length UL: 758 (0012, 0062) Patient Identity Removed CS: &#39;YES&#39; (0012, 0063) De-identification Method LO: &#39;Per DICOM PS 3.15 AnnexE. Details in 0012,0064&#39; (0012, 0064) De-identification Method Code Sequence 8 item(s) - (0008, 0000) Group Length UL: 76 (0008, 0100) Code Value SH: &#39;113100&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Basic Application Confidentiality Profile&#39; (0008, 0000) Group Length UL: 58 (0008, 0100) Code Value SH: &#39;113101&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Pixel Data Option&#39; (0008, 0000) Group Length UL: 56 (0008, 0100) Code Value SH: &#39;113103&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Graphics Option&#39; (0008, 0000) Group Length UL: 58 (0008, 0100) Code Value SH: &#39;113105&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Clean Descriptors Option&#39; (0008, 0000) Group Length UL: 80 (0008, 0100) Code Value SH: &#39;113107&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Longitudinal With Modified Dates Option&#39; (0008, 0000) Group Length UL: 72 (0008, 0100) Code Value SH: &#39;113108&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Patient Characteristics Option&#39; (0008, 0000) Group Length UL: 64 (0008, 0100) Code Value SH: &#39;113109&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Device Identity Option&#39; (0008, 0000) Group Length UL: 60 (0008, 0100) Code Value SH: &#39;113111&#39; (0008, 0102) Coding Scheme Designator SH: &#39;DCM&#39; (0008, 0104) Code Meaning LO: &#39;Retain Safe Private Option&#39; (0013, 0000) Private Creator UN: b&#39;. x00 x00 x00&#39; (0013, 0010) Private tag data LO: &#39;CTP&#39; (0013, 1010) Private tag data UN: b&#39;TCGA-LUAD x00&#39; (0013, 1013) Private tag data UN: b&#39;77779002&#39; (0018, 0000) Group Length UL: 342 (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; (0018, 0020) Scanning Sequence CS: &#39;RM&#39; (0018, 0050) Slice Thickness DS: &#39;8.0&#39; (0018, 0060) KVP DS: &#39;140.0&#39; (0018, 0090) Data Collection Diameter DS: &#39;500.0&#39; (0018, 1000) Device Serial Number LO: &#39; 20643&#39; (0018, 1020) Software Versions LO: &#39;VB40W&#39; (0018, 1110) Distance Source to Detector DS: &#39;1005.0&#39; (0018, 1111) Distance Source to Patient DS: &#39;570.0&#39; (0018, 1120) Gantry/Detector Tilt DS: &#39;0.0&#39; (0018, 1130) Table Height DS: &#39;170.0&#39; (0018, 1140) Rotation Direction CS: &#39;CW&#39; (0018, 1150) Exposure Time IS: &#39;750&#39; (0018, 1151) X-Ray Tube Current IS: &#39;206&#39; (0018, 1152) Exposure IS: &#39;155&#39; (0018, 1170) Generator Power IS: &#39;29&#39; (0018, 1190) Focal Spot(s) DS: &#39;1.2&#39; (0018, 1200) Date of Last Calibration DA: &#39;19830623&#39; (0018, 1201) Time of Last Calibration TM: &#39;214703.931000&#39; (0018, 1210) Convolution Kernel SH: &#39;59 .10.AB50&#39; (0018, 5100) Patient Position CS: &#39;HFS&#39; (0019, 0000) Private Creator UN: b&#39; xf4 x00 x00 x00&#39; (0019, 0010) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0019, 0011) Private tag data LO: &#39;SIEMENS CT VA0 GEN&#39; (0019, 0013) Private tag data LO: &#39;SIEMENS CT VA0 COAD&#39; (0019, 0015) Private tag data LO: &#39;SIEMENS CM VA0 ACQU&#39; (0019, 1392) [Osteo Regression Line Slope] DS: &#39;0.979&#39; (0019, 1393) [Osteo Regression Line Intercept] DS: &#39;-1.42&#39; (0019, 13b0) [Feed per Rotation] DS: &#39;8.0&#39; (0019, 13c0) [Pulmo Water] DS: &#39;2.154907&#39; (0019, 13c1) [Pulmo Air] DS: &#39;-992.9709&#39; (0019, 13c3) [Pulmo Time] TM: &#39;201523.000000&#39; (0020, 0000) Group Length UL: 566 (0020, 000d) Study Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.292315456232117737481743327260 (0020, 000e) Series Instance UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.531955806841803044139009743992 (0020, 0010) Study ID SH: &#39;&#39; (0020, 0011) Series Number IS: &#39;5&#39; (0020, 0012) Acquisition Number IS: &#39;3&#39; (0020, 0013) Instance Number IS: &#39;25&#39; (0020, 0030) Image Position DS: [-02.166094E+02, -2.086094E+02, -2.475000E+02] (0020, 0032) Image Position (Patient) DS: [-217, -209, -247.5] (0020, 0035) Image Orientation DS: [001.000000E+00, 00.000000E+00, 00.000000E+00, 00.000000E+00, 01.000000E+00, 00.000000E+00] (0020, 0037) Image Orientation (Patient) DS: [1, 0, 0, 0, 1, 0] (0020, 0050) Location DS: &#39;-247.5&#39; (0020, 0052) Frame of Reference UID UI: 1.3.6.1.4.1.14519.5.2.1.7777.9002.299172824841582204484171666104 (0020, 0070) Image Geometry Type LO: &#39;PLANAR&#39; (0020, 0080) Masking Image CS: &#39;&#39; (0020, 1040) Position Reference Indicator LO: &#39;&#39; (0020, 1041) Slice Location DS: &#39;-247.5&#39; (0020, 3100) Source Image IDs CS: &#39;&#39; (0020, 3402) Modified Image ID CS: &#39;&#39; (0020, 3403) Modified Image Date DA: &#39;&#39; (0020, 3405) Modified Image Time TM: &#39;&#39; (0020, 5000) Original Image Identification AT: None (0020, 5002) Original Image Identification Nomen LO: &#39;&#39; (0021, 0000) Private Creator UN: b&#39;h x00 x00 x00&#39; (0021, 0010) Private tag data LO: &#39;SIEMENS MED&#39; (0021, 0012) Private tag data LO: &#39;SIEMENS CT VA0 GEN&#39; (0021, 0022) Private tag data LO: &#39;SIEMENS CT VA0 RAW&#39; (0021, 0030) Private tag data LO: &#39;SIEMENS CT VA0 ORMR&#39; (0028, 0000) Group Length UL: 290 (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0005) Image Dimensions US: 2 (0028, 0010) Rows US: 512 (0028, 0011) Columns US: 512 (0028, 0030) Pixel Spacing DS: [007.812500e-01, 007.812500e-01] (0028, 0040) Image Format CS: &#39;RECT&#39; (0028, 0050) Manipulated Image LO: &#39;&#39; (0028, 0060) Compression Code CS: &#39;NONE&#39; (0028, 0100) Bits Allocated US: 16 (0028, 0101) Bits Stored US: 12 (0028, 0102) High Bit US: 11 (0028, 0103) Pixel Representation US: 0 (0028, 0200) Image Location US: 32736 (0028, 0301) Burned In Annotation CS: &#39;NO&#39; (0028, 0303) Longitudinal Temporal Information M CS: &#39;MODIFIED&#39; (0028, 1050) Window Center DS: [000010, -0550] (0028, 1051) Window Width DS: [000400, 01800] (0028, 1052) Rescale Intercept DS: &#39;-1024.0&#39; (0028, 1053) Rescale Slope DS: &#39;1.0&#39; (0029, 0000) Private Creator UN: b&#39;N x00 x00 x00&#39; (0029, 0010) Private tag data LO: &#39;SIEMENS MED DISPLAY&#39; (0029, 0011) Private tag data LO: &#39;SIEMENS CM VA0 CMS&#39; (0029, 0030) Private tag data LO: &#39;SIEMENS MED MG&#39; (0031, 0000) Private Creator UN: b&#39; x14 x00 x00 x00&#39; (0031, 0012) Private tag data LO: &#39;SIEMENS ISI&#39; (0032, 0000) Group Length UL: 8 (0032, 4000) Study Comments LT: &#39;&#39; (0040, 0000) Group Length UL: 8 (0040, 1003) Requested Procedure Priority SH: &#39;&#39; (0091, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0091, 0010) Private tag data LO: &#39;SIENET&#39; (0095, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0095, 0010) Private tag data LO: &#39;SIENET&#39; (0097, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0097, 0010) Private tag data LO: &#39;SIENET&#39; (0099, 0000) Private Creator UN: b&#39; x0e x00 x00 x00&#39; (0099, 0010) Private tag data LO: &#39;SIENET&#39; (7003, 0000) Private Creator UN: b&#39; x14 x00 x00 x00&#39; (7003, 0010) Private tag data LO: &#39;SIEMENS MED&#39; (7fe0, 0000) Group Length UL: 524296 (7fe0, 0010) Pixel Data OW: Array of 524288 elements . . I know that is a hell lot of metadata. Each entry is accessible by its unique Data Tag. Data tags use hexadecimal encoded identifiers. As an example: . . We can call out different using the following code: . Note: The 0x in front of the identifier tells the python code to treat the data tag values as hexadecimal. . print(dicom_file[0x0028, 0x0100]) print(dicom_file[0x0028, 0x0010]) print(dicom_file[0x0018, 0x0015]) . (0028, 0100) Bits Allocated US: 16 (0028, 0010) Rows US: 512 (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; . . There is also an alternative method or one can say more direct way to access various metadata values from your DICOM file. To do so we can treat the loaded DICOM file as an object and can access the metadata values as variables. See the example below: . Please note the lettering:&#39;Body Part Examined&#39; becomes &#39;BodyPartExamined&#39; (so-called Pascal Case). . print(&quot;Bits Allocated:&quot; ,dicom_file.BitsAllocated) print(&quot;Rows:&quot; ,dicom_file.Rows) print(&quot;Body Part Examined:&quot;, dicom_file.BodyPartExamined) . Bits Allocated: 16 Rows: 512 Body Part Examined: CHEST . . After going through the metadata lets access the actual(image) data from the dicom file. This is done using the pixel_array. . This image data is numpy array. We can print its type and size. . ct_image_data = dicom_file.pixel_array print(&quot;Type of CT Image data:&quot;, type(ct_image_data)) print(&quot;Size of CT Image data:&quot;, ct_image_data.shape) . Type of CT Image data: &lt;class &#39;numpy.ndarray&#39;&gt; Size of CT Image data: (512, 512) . Let&#39;s plot the image using Matplotlib.pyplot to have a visual inspection of the CT image data. . 3-Dimensional(3D) Data . In the previous section, we learned how to read the DICOM file. Essentially we read a slice of a CT scan. Usually CT scans and MRI are 3D data, their shape is of (HxWxD) format. In this section, we will take learn how to read and understand 3D data stored as multiple 2D DICOM files. . We will use Path function form pathlib to define the path of the Dicom folder. Then we will use glob function with (&quot;*&quot;) to list all the files present inside the folder. . path2dicom = Path(&quot;./blog_1_data/SE000001/&quot;) all_files = list(path2dicom.glob(&quot;*&quot;)) all_files . [PosixPath(&#39;blog_1_data/SE000001/MR000019&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000013&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000018&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000002&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000010&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000017&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000005&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000026&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000020&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000014&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000025&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000007&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000003&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000023&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000006&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000008&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000022&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000012&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000001&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000024&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000015&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000016&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000000&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000011&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000009&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000004&#39;), PosixPath(&#39;blog_1_data/SE000001/MR000021&#39;)] . . Lets read one slice of the MRI usinf read_file function. and print the metadata. . one_mri_slice = pydicom.read_file(all_files[14]) print(one_mri_slice) . Dataset.file_meta - (0002, 0000) File Meta Information Group Length UL: 214 (0002, 0001) File Meta Information Version OB: b&#39; x00 x01&#39; (0002, 0002) Media Storage SOP Class UID UI: MR Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0002, 0010) Transfer Syntax UID UI: Explicit VR Little Endian (0002, 0012) Implementation Class UID UI: 1.2.840.114089.1.0.0.3.3.38 (0002, 0013) Implementation Version Name SH: &#39;DCF 3.3.38c&#39; (0002, 0016) Source Application Entity Title AE: &#39;DCF&#39; - (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0008) Image Type CS: [&#39;ORIGINAL&#39;, &#39;PRIMARY&#39;, &#39;M_SE&#39;, &#39;M&#39;, &#39;SE&#39;] (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 0016) SOP Class UID UI: MR Image Storage (0008, 0018) SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0008, 0020) Study Date DA: &#39;20150114&#39; (0008, 0021) Series Date DA: &#39;20150114&#39; (0008, 0022) Acquisition Date DA: &#39;20150114&#39; (0008, 0023) Content Date DA: &#39;20150114&#39; (0008, 0030) Study Time TM: &#39;132242&#39; (0008, 0031) Series Time TM: &#39;132628.00000&#39; (0008, 0032) Acquisition Time TM: &#39;132628.00&#39; (0008, 0033) Content Time TM: &#39;132628.00&#39; (0008, 0050) Accession Number SH: &#39;RJN78893652&#39; (0008, 0060) Modality CS: &#39;MR&#39; (0008, 0070) Manufacturer LO: &#39;Philips Medical Systems&#39; (0008, 0080) Institution Name LO: &#39;Macclesfield&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;WHITTINGHAM VM^-&#39; (0008, 1010) Station Name SH: &#39;PMSN-X6FNOVG0RR&#39; (0008, 1030) Study Description LO: &#39;MRI Head&#39; (0008, 1032) Procedure Code Sequence 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 103e) Series Description LO: &#39;T2W_TSE&#39; (0008, 1040) Institutional Department Name LO: &#39;MRI&#39; (0008, 1070) Operators&#39; Name PN: &#39;&#39; (0008, 1080) Admitting Diagnoses Description LO: &#39;&#39; (0008, 1090) Manufacturer&#39;s Model Name LO: &#39;Achieva&#39; (0008, 1111) Referenced Performed Procedure Step Sequence 1 item(s) - (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 1150) Referenced SOP Class UID UI: Modality Performed Procedure Step SOP Class (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.6788.2015011413224231041 (0020, 0013) Instance Number IS: &#39;0&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1406) [Unknown] SS: 0 (0008, 1140) Referenced Image Sequence 3 item(s) - (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255028693 (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255023690 (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413255025691 (0009, 0000) Private Creator UL: 14 (0009, 0010) Private tag data LO: &#39;GEIIS&#39; (0010, 0010) Patient&#39;s Name PN: &#39;LIONHEART^WILLIAM&#39; (0010, 0020) Patient ID LO: &#39;RJN7270540X&#39; (0010, 0021) Issuer of Patient ID LO: &#39;RJN&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;19620726&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1000) Other Patient IDs LO: &#39;4824124506&#39; (0010, 1030) Patient&#39;s Weight DS: &#39;82.0&#39; (0010, 1040) Patient&#39;s Address LO: &#39;MARSHAM, START LANE, WHALEY BRIDGE, SK23 7BP&#39; (0010, 21c0) Pregnancy Status US: 4 (0018, 0015) Body Part Examined CS: &#39;HEAD&#39; (0018, 0020) Scanning Sequence CS: &#39;SE&#39; (0018, 0021) Sequence Variant CS: &#39;SK&#39; (0018, 0022) Scan Options CS: &#39;&#39; (0018, 0023) MR Acquisition Type CS: &#39;&#39; (0018, 0024) Sequence Name SH: &#39;&#39; (0018, 0050) Slice Thickness DS: &#39;5.0&#39; (0018, 0080) Repetition Time DS: &#39;3136.03076171875&#39; (0018, 0081) Echo Time DS: &#39;110.0&#39; (0018, 0083) Number of Averages DS: &#39;1.0&#39; (0018, 0084) Imaging Frequency DS: &#39;63.895818&#39; (0018, 0085) Imaged Nucleus SH: &#39;1H&#39; (0018, 0086) Echo Number(s) IS: &#39;1&#39; (0018, 0087) Magnetic Field Strength DS: &#39;1.5&#39; (0018, 0088) Spacing Between Slices DS: &#39;6.0&#39; (0018, 0089) Number of Phase Encoding Steps IS: &#39;173&#39; (0018, 0091) Echo Train Length IS: &#39;23&#39; (0018, 0093) Percent Sampling DS: &#39;75.0&#39; (0018, 0094) Percent Phase Field of View DS: &#39;79.6875&#39; (0018, 1000) Device Serial Number LO: &#39;12098&#39; (0018, 1020) Software Versions LO: [&#39;1.5.4&#39;, &#39;1.5.4.9&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;, &#39;Gyroscan PMS/DICOM 2.0 MR $Id: datadefs,v 5.27 2004/10/18 06:50:&#39;] (0018, 1030) Protocol Name LO: &#39;T2W_TSE&#39; (0018, 1081) Low R-R Value IS: &#39;0&#39; (0018, 1082) High R-R Value IS: &#39;0&#39; (0018, 1083) Intervals Acquired IS: &#39;0&#39; (0018, 1084) Intervals Rejected IS: &#39;0&#39; (0018, 1088) Heart Rate IS: &#39;0&#39; (0018, 1100) Reconstruction Diameter DS: &#39;240.0&#39; (0018, 1250) Receive Coil Name SH: &#39;Head&#39; (0018, 1251) Transmit Coil Name SH: &#39;B&#39; (0018, 1310) Acquisition Matrix US: [0, 256, 173, 0] (0018, 1312) In-plane Phase Encoding Direction CS: &#39;ROW&#39; (0018, 1314) Flip Angle DS: &#39;90.0&#39; (0018, 5100) Patient Position CS: &#39;HFS&#39; (0020, 000d) Study Instance UID UI: 1.2.840.113619.2.243.6074146108103184.41976.4343.2084088 (0020, 000e) Series Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413262801702 (0020, 0010) Study ID SH: &#39;474297762&#39; (0020, 0011) Series Number IS: &#39;201&#39; (0020, 0012) Acquisition Number IS: &#39;2&#39; (0020, 0013) Instance Number IS: &#39;7&#39; (0020, 0032) Image Position (Patient) DS: [-123.82818938791, -134.32321047782, -13.624799072742] (0020, 0037) Image Orientation (Patient) DS: [0.99935883283615, -0.0323828160762, 0.01527170091867, 0.03418818861246, 0.98977828025817, -0.1384561806917] (0020, 0052) Frame of Reference UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.5544.2015011413251448000 (0020, 0100) Temporal Position Identifier IS: &#39;1&#39; (0020, 0105) Number of Temporal Positions IS: &#39;1&#39; (0020, 1040) Position Reference Indicator LO: &#39;&#39; (0020, 1041) Slice Location DS: &#39;35.9999959546749&#39; (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0010) Rows US: 256 (0028, 0011) Columns US: 256 (0028, 0030) Pixel Spacing DS: [0.9375, 0.9375] (0028, 0034) Pixel Aspect Ratio IS: [1, 1] (0028, 0100) Bits Allocated US: 16 (0028, 0101) Bits Stored US: 12 (0028, 0102) High Bit US: 11 (0028, 0103) Pixel Representation US: 0 (0028, 1050) Window Center DS: &#39;308.513876454789&#39; (0028, 1051) Window Width DS: &#39;536.374216651745&#39; (0028, 2110) Lossy Image Compression CS: &#39;00&#39; (0032, 1032) Requesting Physician PN: &#39;WHITTINGHAM VM^-&#39; (0032, 1033) Requesting Service LO: &#39;Unspecified&#39; (0032, 1060) Requested Procedure Description LO: &#39;MRI Head&#39; (0040, 0241) Performed Station AE Title AE: &#39;RJN71PHMR01&#39; (0040, 0244) Performed Procedure Step Start Date DA: &#39;20150114&#39; (0040, 0245) Performed Procedure Step Start Time TM: &#39;132242&#39; (0040, 0250) Performed Procedure Step End Date DA: &#39;20150114&#39; (0040, 0251) Performed Procedure Step End Time TM: &#39;132242&#39; (0040, 0253) Performed Procedure Step ID SH: &#39;474297762&#39; (0040, 0254) Performed Procedure Step Descriptio LO: &#39;MRI Head&#39; (0040, 0260) Performed Protocol Code Sequence 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 010b) Context Group Extension Flag CS: &#39;N&#39; (0040, 0275) Request Attributes Sequence 1 item(s) - (0040, 1001) Requested Procedure ID SH: &#39;RJN78893652&#39; (0040, 0321) Film Consumption Sequence 0 item(s) - (0040, 2017) Filler Order Number / Imaging Servi LO: &#39;77706562&#39; (0903, 0010) Private Creator LO: &#39;GEIIS PACS&#39; (0903, 1010) [Reject Image Flag] US: 0 (0903, 1011) [Significant Flag] US: 0 (0903, 1012) [Confidential Flag] US: 0 (0905, 0010) Private Creator LO: &#39;GEIIS&#39; (0905, 1030) [Assigning Authority For Patient ID LO: &#39;RJN&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 0090) Private Creator LO: &#39;Philips Imaging DD 129&#39; (2001, 1001) [Chemical Shift] FL: 0.0 (2001, 1002) [Chemical Shift Number MR] IS: &#39;0&#39; (2001, 1003) [Diffusion B-Factor] FL: 0.0 (2001, 1006) [Image Enhanced] CS: &#39;N&#39; (2001, 1007) [Image Type ED ES] CS: &#39;U&#39; (2001, 1008) [Phase Number] IS: &#39;1&#39; (2001, 1009) [Unknown] FL: 0.0 (2001, 100a) [Slice Number MR] IS: &#39;7&#39; (2001, 100b) [Slice Orientation] CS: &#39;TRANSVERSAL&#39; (2001, 100c) [Unknown] CS: &#39;N&#39; (2001, 100e) [Unknown] CS: &#39;N&#39; (2001, 100f) [Unknown] SS: 0 (2001, 1010) [Cardiac Sync] CS: &#39;NO&#39; (2001, 1011) [Diffusion Echo Time] FL: 0.0 (2001, 1012) [Dynamic Series] CS: &#39;N&#39; (2001, 1013) [EPI Factor] SL: 1 (2001, 1014) [Number of Echoes] SL: 1 (2001, 1015) [Number of Locations] SS: 1 (2001, 1016) [Number of PC Directions] SS: 0 (2001, 1017) [Number of Phases MR] SL: 1 (2001, 1018) [Number of Slices MR] SL: 27 (2001, 1019) [Partial Matrix Scanned] CS: &#39;N&#39; (2001, 101a) [PC Velocity] FL: [0.0, 0.0, 0.0] (2001, 101b) [Prepulse Delay] FL: 0.0 (2001, 101c) [Prepulse Type] CS: &#39;NO&#39; (2001, 101d) [Reconstruction Number MR] IS: &#39;1&#39; (2001, 101f) [Respiration Sync] CS: &#39;NO&#39; (2001, 1020) [Scanning Technique Description MR] LO: &#39;TSE&#39; (2001, 1021) [SPIR] CS: &#39;N&#39; (2001, 1022) [Water Fat Shift] FL: 1.3013890981674194 (2001, 1023) [Flip Angle Philips] DS: &#39;90.0&#39; (2001, 1024) [Interactive] CS: &#39;N&#39; (2001, 1025) [Echo Time Display MR] SH: &#39;110&#39; (2001, 105f) Private tag data 1 item(s) - (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 102d) [Number of Stack Slices] SS: 27 (2001, 1032) [Stack Radial Angle] FL: 0.0 (2001, 1033) [Stack Radial Axis] CS: &#39;AP&#39; (2001, 1035) [Stack Slice Number] SS: 1 (2001, 1036) [Stack Type] CS: &#39;PARALLEL&#39; (2005, 0010) Private Creator LO: &#39;Philips MR Imaging DD 001&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 1071) [Unknown] FL: -0.6091800332069397 (2005, 1072) [Unknown] FL: -1.9593315124511719 (2005, 1073) [Unknown] FL: -7.9840474128723145 (2005, 1074) [Unknown] FL: 240.0 (2005, 1075) [Unknown] FL: 161.0 (2005, 1076) [Unknown] FL: 191.25 (2005, 1078) [Unknown] FL: -13.602395057678223 (2005, 1079) [Unknown] FL: 13.183597564697266 (2005, 107a) [Unknown] FL: -0.24909068644046783 (2005, 107b) [Unknown] CS: &#39;RL&#39; (2005, 107e) [Unknown] FL: 6.0 (2005, 1081) [Unknown] CS: &#39;FH&#39; (2005, 10a3) [Unknown] IS: &#39;7&#39; (2005, 10a4) [Unknown] IS: &#39;0&#39; (2005, 10a5) [Unknown] IS: &#39;0&#39; (2005, 10a6) [Unknown] IS: &#39;1&#39; (2005, 10a7) [Unknown] CS: &#39;DEFAULT&#39; (2005, 1390) [Unknown] CS: &#39;R_A&#39; (2001, 1060) [Number of Stacks] SL: 1 (2001, 1061) [Unknown] CS: &#39;N&#39; (2001, 1062) [Unknown] CS: &#39;N&#39; (2001, 1063) [Examination Source] CS: &#39;ELSEWHERE&#39; (2001, 106e) [Series Type] SH: &#39;MRSERIES&#39; (2001, 107b) [Acquisition Number] IS: &#39;2&#39; (2001, 1081) [Number of Dynamic Scans] IS: &#39;1&#39; (2001, 1082) [Echo Train Length] IS: &#39;0&#39; (2001, 1083) [Imaging Frequency] DS: &#39;63.895818&#39; (2001, 1084) [Inversion Time] DS: &#39;0.0&#39; (2001, 1085) [Magnetic Field Strength] DS: &#39;1.5&#39; (2001, 1086) [Unknown] IS: &#39;0&#39; (2001, 1087) [Imaged Nucleus] SH: &#39;1H&#39; (2001, 1088) [Number of Averages] DS: &#39;1.0&#39; (2001, 1089) [Phase FOV Percent] DS: &#39;0.0&#39; (2001, 108a) [Sampling Percent] DS: &#39;0.0&#39; (2001, 108b) [Unknown] SH: &#39;B&#39; (2001, 10c8) Private tag data LO: &#39;*FAST BRAIN&#39; (2001, 9000) Private tag data 1 item(s) - (0008, 0012) Instance Creation Date DA: &#39;20150114&#39; (0008, 0013) Instance Creation Time TM: &#39;132938&#39; (0008, 0014) Instance Creator UID UI: 1.3.46.670589.11.12098.5 (0008, 0016) SOP Class UID UI: Grayscale Softcopy Presentation State Storage (0008, 0018) SOP Instance UID UI: 1.3.46.670589.11.0.0.51.4.3.0.12098.1.3104.1421242179546 (0008, 1115) Referenced Series Sequence 1 item(s) - (0008, 1140) Referenced Image Sequence 1 item(s) - (0008, 1150) Referenced SOP Class UID UI: MR Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413270093711 (0020, 000e) Series Instance UID UI: 1.3.46.670589.11.0.0.11.4.2.0.12098.5.4500.2015011413262801702 (0018, 1622) Shutter Presentation Value US: 0 (0020, 0013) Instance Number IS: &#39;1&#39; (0028, 3002) LUT Descriptor US: [0, 0, 0] (0028, 3003) LUT Explanation LO: &#39;&#39; (0028, 3006) LUT Data US: 0 (0028, 3110) Softcopy VOI LUT Sequence 1 item(s) - (0028, 1050) Window Center DS: &#39;1094.0&#39; (0028, 1051) Window Width DS: &#39;1902.0&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 1053) [Window Invert] CS: &#39;N&#39; (2001, 1077) [GL TrafoType] CS: &#39;LINEARVOI&#39; (0070, 005a) Displayed Area Selection Sequence 1 item(s) - (0070, 0052) Displayed Area Top Left Hand Corner SL: [1, 1] (0070, 0053) Displayed Area Bottom Right Hand Co SL: [256, 256] (0070, 0100) Presentation Size Mode CS: &#39;SCALE TO FIT&#39; (0070, 0102) Presentation Pixel Aspect Ratio IS: [1, 1] (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 103f) [Interpolation Method] CS: &#39;BI_CUBIC&#39; (0070, 0080) Content Label CS: &#39;AS LAST SEEN&#39; (0070, 0081) Content Description LO: &#39;&#39; (0070, 0082) Presentation Creation Date DA: &#39;20150114&#39; (0070, 0083) Presentation Creation Time TM: &#39;132727&#39; (0070, 0084) Content Creator&#39;s Name PN: &#39;Achieva&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 0090) Private Creator LO: &#39;Philips Imaging DD 129&#39; (2001, 1026) [Presentation State Subtraction Act CS: &#39;N&#39; (2001, 1067) [Unknown] CS: &#39;&#39; (2001, 1068) Private tag data 1 item(s) - (0028, 1052) Rescale Intercept DS: &#39;0.0&#39; (0028, 1053) Rescale Slope DS: &#39;3.54603174603175&#39; (0028, 1054) Rescale Type LO: &#39;normalized&#39; (2001, 0010) Private Creator LO: &#39;Philips Imaging DD 001&#39; (2001, 1077) [GL TrafoType] CS: &#39;LINEARMODALITY&#39; (2001, 1077) [GL TrafoType] CS: &#39;L_PRESENTATION&#39; (2001, 109f) [Pixel Processing Kernel Size] US: [0, 0] (2001, 9000) Private tag data 0 item(s) - (2005, 0012) Private Creator LO: &#39;Philips MR Imaging DD 003&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1234) [Unknown] SL: 0 (2005, 1257) [Unknown] SS: 0 (2005, 1281) [Unknown] UI: &#39;&#39; (2005, 1282) [Unknown] CS: &#39;&#39; (2005, 1389) Private tag data 0 item(s) - (2005, 1406) [Unknown] SS: 0 (2050, 0020) Presentation LUT Shape CS: &#39;IDENTITY&#39; (2005, 0010) Private Creator LO: &#39;Philips MR Imaging DD 001&#39; (2005, 0011) Private Creator LO: &#39;Philips MR Imaging DD 002&#39; (2005, 0012) Private Creator LO: &#39;Philips MR Imaging DD 003&#39; (2005, 0013) Private Creator LO: &#39;Philips MR Imaging DD 004&#39; (2005, 0014) Private Creator LO: &#39;Philips MR Imaging DD 005&#39; (2005, 1000) [Unknown] FL: -0.6091800332069397 (2005, 1001) [Unknown] FL: -1.9593315124511719 (2005, 1002) [Unknown] FL: -7.984046936035156 (2005, 1004) [Unknown] CS: &#39;NONE&#39; (2005, 1008) [Unknown] FL: -19.435754776000977 (2005, 1009) [Unknown] FL: -28.406936645507812 (2005, 100a) [Unknown] FL: 0.19745318591594696 (2005, 100b) [Unknown] FL: 79173.09375 (2005, 100c) [Unknown] FL: 5.142798900604248 (2005, 100d) [Unknown] FL: 0.0 (2005, 100e) [Unknown] FL: 0.009394234046339989 (2005, 100f) [Window Center] DS: &#39;1094.0&#39; (2005, 1010) [Window Width] DS: &#39;1902.0&#39; (2005, 1011) [Unknown] CS: &#39;M&#39; (2005, 1012) [Unknown] CS: &#39;N&#39; (2005, 1013) [Unknown] CS: &#39;NO&#39; (2005, 1014) [Unknown] CS: &#39;N&#39; (2005, 1015) [Unknown] CS: &#39;N&#39; (2005, 1016) [Unknown] CS: &#39;N&#39; (2005, 1017) [Unknown] CS: &#39;N&#39; (2005, 1019) [Unknown] CS: &#39;N&#39; (2005, 101a) [Unknown] SS: 0 (2005, 101b) [Unknown] CS: &#39;N&#39; (2005, 101c) [Unknown] CS: &#39;N&#39; (2005, 101d) [Unknown] SS: 256 (2005, 101e) [Unknown] SH: &#39;compose&#39; (2005, 101f) [Unknown] SH: &#39;compose&#39; (2005, 1020) [Number of Chemical Shift] SL: 0 (2005, 1021) [Unknown] SS: 1 (2005, 1022) [Unknown] IS: &#39;0&#39; (2005, 1023) [Unknown] SS: 0 (2005, 1025) [Unknown] SS: 0 (2005, 1026) [Unknown] CS: &#39;N&#39; (2005, 1027) [Unknown] CS: &#39;MINIMUM&#39; (2005, 1028) [Unknown] CS: &#39;N&#39; (2005, 1029) [Unknown] CS: &#39;N&#39; (2005, 102a) [Unknown] IS: &#39;486048324&#39; (2005, 102b) [Unknown] SS: 100 (2005, 102c) [Unknown] CS: &#39;N&#39; (2005, 102d) [Unknown] IS: &#39;0&#39; (2005, 102e) [Unknown] CS: &#39;N&#39; (2005, 102f) [Unknown] CS: &#39;N&#39; (2005, 1030) [Repetition Time] FL: 3136.03076171875 (2005, 1031) [Unknown] CS: &#39;N&#39; (2005, 1033) [Acquisition Duration] FL: 43.9044303894043 (2005, 1034) [Unknown] CS: &#39;Y&#39; (2005, 1035) [Unknown] CS: &#39;PIXEL&#39; (2005, 1036) [Unknown] CS: &#39;N&#39; (2005, 1037) [Unknown] CS: &#39;N&#39; (2005, 1038) [Unknown] CS: &#39;N&#39; (2005, 1039) [Unknown] CS: &#39;N&#39; (2005, 103b) [Unknown] CS: &#39;N&#39; (2005, 103c) [Unknown] CS: &#39;N&#39; (2005, 103d) [Unknown] SS: 102 (2005, 103e) [Unknown] SL: Array of 102 elements (2005, 105f) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1060) [Unknown] IS: &#39;-1&#39; (2005, 1061) [Unknown] CS: &#39;NO&#39; (2005, 1063) [Unknown] SS: 0 (2005, 106e) [Unknown] CS: &#39;SE&#39; (2005, 106f) [Unknown] CS: &#39;MS&#39; (2005, 1080) Private tag data 0 item(s) - (2005, 1083) Private tag data 0 item(s) - (2005, 1084) Private tag data 0 item(s) - (2005, 1085) Private tag data 0 item(s) - (2005, 1086) [Unknown] SS: 0 (2005, 109e) Private tag data 0 item(s) - (2005, 10a0) [Unknown] FL: 0.0 (2005, 10a2) [Unknown] CS: &#39;N&#39; (2005, 10a8) [Unknown] DS: &#39;0.0&#39; (2005, 10a9) [Unknown] CS: &#39;NONE&#39; (2005, 10b0) [Diffusion Direction RL] FL: 0.0 (2005, 10b1) [Diffusion Direction AP] FL: 0.0 (2005, 10b2) [Diffusion Direction FH] FL: 0.0 (2005, 10c0) [Unknown] CS: &#39;SE&#39; (2005, 1199) [Unknown] UL: 1 (2005, 1200) [Unknown] UL: 1 (2005, 1201) [Unknown] UL: 0 (2005, 1213) [Unknown] UL: 1 (2005, 1245) [Unknown] SS: 2 (2005, 1249) [Unknown] SS: 0 (2005, 1251) [Unknown] SS: 0 (2005, 1252) [Unknown] SS: 1 (2005, 1253) [Unknown] SS: 1 (2005, 1325) [Unknown] CS: &#39;N&#39; (2005, 1326) [Unknown] FL: 0.0 (2005, 1327) [Unknown] CS: &#39;REAL&#39; (2005, 1328) [Unknown] CS: &#39;ORIGINAL&#39; (2005, 1329) [Unknown] FL: 50.0 (2005, 1330) [Unknown] CS: [&#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;, &#39;PLUS_A_PLUS_B&#39;] (2005, 1331) [Unknown] SS: 0 (2005, 1333) [Unknown] FL: [0.0, 0.0, 0.0] (2005, 1334) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1335) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1336) [Unknown] FL: 0.0 (2005, 1337) [Unknown] FL: 0.0 (2005, 1338) [Unknown] FL: 0.0 (2005, 1339) [Unknown] SS: [0, 0] (2005, 1340) [Unknown] CS: &#39;PRE_FT&#39; (2005, 1341) [Unknown] CS: &#39;UNKNOWN&#39; (2005, 1342) [Unknown] CS: &#39;FID&#39; (2005, 1343) [Unknown] CS: &#39;Y&#39; (2005, 1344) [Unknown] SS: Array of 40 elements (2005, 1345) [Unknown] CS: &#39;NO&#39; (2005, 1346) [Unknown] CS: &#39;HERTZ&#39; (2005, 1347) [Unknown] FL: 0.0 (2005, 1348) [Unknown] CS: &#39;OFF&#39; (2005, 1349) [Unknown] FL: 0.0 (2005, 1350) [Unknown] FL: [0.0, 0.0] (2005, 1351) [Unknown] SS: 0 (2005, 1352) [Unknown] SS: 0 (2005, 1355) [Unknown] FL: Array of 30 elements (2005, 1356) [Unknown] CS: &#39;NO&#39; (2005, 1357) [Unknown] SS: 0 (2005, 1359) [Unknown] FL: 1.0 (2005, 1360) [Unknown] FL: 0.0 (2005, 1361) [Unknown] FL: [0.0, 0.0] (2005, 1362) [Unknown] FL: 0.0 (2005, 1363) [Unknown] FL: 0.0 (2005, 1364) [Unknown] CS: &#39;NO&#39; (2005, 1370) [Unknown] SS: 0 (2005, 1371) Private tag data 0 item(s) - (2005, 1381) [Unknown] IS: &#39;3&#39; (2005, 1382) [Unknown] UL: 1 (2005, 1391) [Unknown] PN: &#39;&#39; (2005, 1392) [Unknown] IS: &#39;0&#39; (2005, 1393) [Unknown] IS: &#39;-1&#39; (2005, 1396) [Unknown] CS: &#39;NO&#39; (2005, 1397) [Unknown] LO: &#39;SNM3.T-D1100.Head&#39; (2005, 1398) [Unknown] CS: &#39;NO&#39; (2005, 1399) [Unknown] CS: &#39;NO&#39; (2005, 1400) [Unknown] CS: &#39;YES&#39; (2005, 1401) [Unknown] UL: 1 (2005, 1402) Private tag data 1 item(s) - (0008, 0100) Code Value SH: &#39;MSKUH&#39; (0008, 0102) Coding Scheme Designator SH: &#39;BROKER&#39; (0008, 0103) Coding Scheme Version SH: &#39;&#39; (0008, 0104) Code Meaning LO: &#39;MRI Head&#39; (0008, 010b) Context Group Extension Flag CS: &#39;N&#39; (0008, 010d) Context Group Extension Creator UID UI: &#39;&#39; (2005, 1403) [Unknown] UL: 1 (2005, 1406) [Unknown] SS: 0 (2005, 1409) [Unknown] DS: &#39;0.0&#39; (2005, 140a) [Unknown] DS: &#39;3.54603174603174&#39; (2005, 140b) [Unknown] LO: &#39;normalized&#39; (2050, 0020) Presentation LUT Shape CS: &#39;IDENTITY&#39; (3109, 0010) Private Creator LO: &#39;Applicare/RadWorks/Version 5.0&#39; (3109, 0011) Private Creator LO: &#39;Applicare/RadWorks/Version 6.0/Summary&#39; (3109, 1002) [NEW/SEEN Status] SH: &#39;NEW&#39; (3109, 1008) [Receive Origin] LO: &#39;192.168.210.54&#39; (3109, 100a) [Receive Date] DA: &#39;20150114&#39; (3109, 100b) [Receive Time] TM: &#39;135015&#39; (3109, 1112) [Receive Origin Description] ST: &#39;RJNDAS54&#39; (7fd1, 0000) Private Creator UL: 26 (7fd1, 0010) Private tag data LO: &#39;GEIIS&#39; (7fd1, 1010) [GE IIS Compression ID] UL: 0 (7fe0, 0000) Group Length UL: 131084 (7fe0, 0010) Pixel Data OW: Array of 131072 elements . . We can also plot this slice. . Now we will read these files by using the read_file method and append them to a list. . full_mri = [] for i in all_files: data = pydicom.read_file(i) full_mri.append(data) print(f&quot;There are {len(full_mri)} slices in our MRI.&quot;) . There are 27 slices in our MRI. . . Important: Pay attention! This is important. . While appending slices in full_mri list we appended them in random fashion. All the slices should be in right order. To view the slice location of the MRI we can use SliceLocation. The current slice order is radndom and can be verified by inspecting the SliceLocation shown below: . for i in full_mri: print(i.SliceLocation) . 113.999995959439 77.9999962275740 107.999995419197 11.9999973042441 59.9999962290673 101.999994745866 29.9999952815023 155.999992554172 119.999996566542 83.9999967682912 149.999999502083 41.9999963629367 17.9999979772582 137.999998321624 35.9999959546749 47.9999970362677 131.999997780749 71.9999961590453 5.99999663091323 143.999998928727 89.9999955528687 95.9999960937442 0.0 65.9999961939969 53.9999958207213 23.9999946081714 125.999997173645 . . It is crucial to order them, otherwise the scan will be shuffled for no reason and can be a problem for visualization and for further analysis. . To correct this, we will sort the mri_data list using the SliceLocation. This can be done by the following code: . mri_data_ordered = sorted(full_mri, key=lambda x: x.SliceLocation) . Corrected MRI Slice Order: . for i in mri_data_ordered: print(i.SliceLocation) . 0.0 5.99999663091323 11.9999973042441 17.9999979772582 23.9999946081714 29.9999952815023 35.9999959546749 41.9999963629367 47.9999970362677 53.9999958207213 59.9999962290673 65.9999961939969 71.9999961590453 77.9999962275740 83.9999967682912 89.9999955528687 95.9999960937442 101.999994745866 107.999995419197 113.999995959439 119.999996566542 125.999997173645 131.999997780749 137.999998321624 143.999998928727 149.999999502083 155.999992554172 . . Now, lets move ahead and extract the actual Image data from the mri_data list. We will again use the .pixel_array to get the image content of the slice and then append it to the full_volume list. . full_volume = [] for slice in mri_data_ordered: full_volume.append(slice.pixel_array) full_volume = np.array(full_volume) . Lets print the shape! . print(full_volume.shape) . (27, 256, 256) . And now we can have look at few slices of the 3D Volume. We can plot this both in 2D and 3D way. . Animated GIF! . Your browser does not support the video tag. NIfTI . . What are NIfTI files? . Another popular and widely used data file extension in medical imaging is NIfTI. It is an acronym for Neuroimaging Informatics Technology Initiative. These are open file formats for the storage of medical image data. They were initially used for neuroimaging, a branch of medical imaging that focuses on the brain, but are now used for other radiological images too. . NIfTI Structure . Similar to DICOM files, NIfTI files have two components those are Header and Body. The header contains the metadata, but unlike DICOM files, the header of NIfTI has only necessary metadata. The body of NIfTI contains the actual image data(2D, 3D, 4D, etc.) | NIfTI files are more popular in research settings than in hospital standards. | File extension is “.nii” or “.nii-gz”. The prior extension refers to a compressed version. | In general they are easier to handle. | . You can read more about NIfTI files here. . How to read NIfTI file? . There are multiple python libraries that can handle NIfTI files. We will use Nibabel for our purpose. Lets start with some imports, remember you can run all this code as ipynb notebook on google colab or binder by just clicking &quot;run on colab&quot;, present on top of this page. . import nibabel as nib import matplotlib.pyplot as plt import numpy as np from pathlib import Path . We can read the NIfTI file in nibabel using nib.load(path) function. . path2nifti = &quot;./blog_1_data/BraTS20_Training_001_flair.nii&quot; mri_nifti = nib.load(path2nifti) . Just like DICOM files NIfTI files also carries metadata but only the necessary one. To access the metadata, we can print the NIfTI file. Click on Show Output to see the output. . print(mri_nifti); . &lt;class &#39;nibabel.nifti1.Nifti1Image&#39;&gt; data shape (240, 240, 155) affine: [[ -1. -0. -0. 0.] [ -0. -1. -0. 239.] [ 0. 0. 1. 0.] [ 0. 0. 0. 1.]] metadata: &lt;class &#39;nibabel.nifti1.Nifti1Header&#39;&gt; object, endian=&#39;&lt;&#39; sizeof_hdr : 348 data_type : b&#39;&#39; db_name : b&#39;&#39; extents : 0 session_error : 0 regular : b&#39;r&#39; dim_info : 0 dim : [ 3 240 240 155 1 1 1 1] intent_p1 : 0.0 intent_p2 : 0.0 intent_p3 : 0.0 intent_code : none datatype : int16 bitpix : 16 slice_start : 0 pixdim : [1. 1. 1. 1. 0. 0. 0. 0.] vox_offset : 0.0 scl_slope : nan scl_inter : nan slice_end : 0 slice_code : unknown xyzt_units : 2 cal_max : 0.0 cal_min : 0.0 slice_duration : 0.0 toffset : 0.0 glmax : 0 glmin : 0 descrip : b&#39;&#39; aux_file : b&#39;&#39; qform_code : scanner sform_code : scanner quatern_b : 0.0 quatern_c : 0.0 quatern_d : 1.0 qoffset_x : 0.0 qoffset_y : 239.0 qoffset_z : 0.0 srow_x : [-1. -0. -0. 0.] srow_y : [ -0. -1. -0. 239.] srow_z : [0. 0. 1. 0.] intent_name : b&#39;&#39; magic : b&#39;n+1&#39; . . Each entry is accessible by using header object in the NIfTI. . print(mri_nifti.header[&#39;qoffset_y&#39;]) print(mri_nifti.header[&#39;sizeof_hdr&#39;]) print(mri_nifti.header[&#39;pixdim&#39;]) . 239.0 348 [1. 1. 1. 1. 0. 0. 0. 0.] . . We can find the shape of image data using .shape . print(&quot;Shape of MRI:&quot;, mri_nifti.shape) . Shape of MRI: (240, 240, 155) . After going through the metadata lets access the actual(image) data from the NIfTI file. This is done using the get_fdata. Just like in dicom files the image data stored is a Numpy array. We can print the size and type. . mri_image_data = mri_nifti.get_fdata() print(&quot;Type of MRI Image data:&quot;, type(mri_image_data)) print(&quot;Shape of MRI Array:&quot;, mri_image_data.shape) . Type of MRI Image data: &lt;class &#39;numpy.memmap&#39;&gt; Shape of MRI Array: (240, 240, 155) . Lets plot the Image data. As the image is an MRI(3D) we have to plot it as GIF. . Your browser does not support the video tag. Affine Array and Orientation . All these Medical images(CT scans, MRI, X-RAYs) are represenation of some reference space to digital space. An affine array is an array that tells you the position of the image array data in a reference space. Discussion about the affine matrix is out of the scope of this blog. But I would strongly recommend you to read this article on the coordinate systems and affine for more information. Another great blog will be Understanding coordinate systems and DICOM for deep learning medical image analysis by Nikolas Adaloglou. . To access the affine array of the medical image in NIfTI, we use .affine command. . print(&quot;The affine Matrix of the MRI Image: n&quot;, mri_nifti.affine) . The affine Matrix of the MRI Image: [[ -1. -0. -0. 0.] [ -0. -1. -0. 239.] [ 0. 0. 1. 0.] [ 0. 0. 0. 1.]] . Through this Affine Array we can access the orinetation of our Medical imaging data in coordicate space. This can be done using nib.aff2axcodes(Affine Array) . print(&quot;Orientation of MRI Image:&quot;, nib.aff2axcodes(mri_nifti.affine)) . Orientation of MRI Image: (&#39;L&#39;, &#39;P&#39;, &#39;S&#39;) . The orientation of Image can be &quot;LPS&quot; or &quot;RAS&quot;. The meaning of them are as follows: . Later in pre-processing steps while building Machine/Deep Learning model we ensure that all the data we are geting is of same orientation. Usually the problem of jumble orientation among medical images happen when the data is from multiple sources/scanners. . DICOM to NIfTI Conversion . NIfTI files are easy to handle as compared to DICOM files, especially in the case of 3D data. In DICOM, usually, 3D data is stored in multiple files, where each file represents one slice of the data. Therefore it makes them difficult to handle. . In this section, we will learn how to convert DICOM to NIfTI using another python library called dicom2nifti. This library is straightforward and easy to use. . First we will import the library and define the path to dicom directory. . import dicom2nifti path2dicom = &quot;./blog_1_data/SE000001/&quot; . To covert the dicom2nifti we will use .convert_directory(path_to_dicom, save_directory) function that take two inputs, path of dicom and save directory. . dicom2nifti.convert_directory(path2dicom, &quot;./blog_1_data/&quot;) . We can further confirm the conversion by reading the converted file using nibabel. . path2nifti_from_dicom = &quot;./blog_1_data/201_t2w_tse.nii.gz&quot; nifti_from_dicom = nib.load(path2nifti_from_dicom) print(nifti_from_dicom) print(nifti_from_dicom.shape) . &lt;class &#39;nibabel.nifti1.Nifti1Image&#39;&gt; data shape (256, 256, 27) affine: [[-9.36898887e-01 3.20514254e-02 6.37919828e-02 1.15272324e+02] [ 3.03588901e-02 9.27917123e-01 -8.33337128e-01 -9.72956390e+01] [ 1.43172191e-02 1.29802674e-01 5.94150448e+00 -8.23735046e+01] [ 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.00000000e+00]] metadata: &lt;class &#39;nibabel.nifti1.Nifti1Header&#39;&gt; object, endian=&#39;&lt;&#39; sizeof_hdr : 348 data_type : b&#39;&#39; db_name : b&#39;&#39; extents : 0 session_error : 0 regular : b&#39;&#39; dim_info : 0 dim : [ 3 256 256 27 1 1 1 1] intent_p1 : 0.0 intent_p2 : 0.0 intent_p3 : 0.0 intent_code : none datatype : uint16 bitpix : 16 slice_start : 0 pixdim : [-1. 0.9375 0.9375 5.9999995 1. 1. 1. 1. ] vox_offset : 0.0 scl_slope : nan scl_inter : nan slice_end : 0 slice_code : unknown xyzt_units : 2 cal_max : 0.0 cal_min : 0.0 slice_duration : 0.0 toffset : 0.0 glmax : 0 glmin : 0 descrip : b&#39;&#39; aux_file : b&#39;&#39; qform_code : unknown sform_code : aligned quatern_b : -0.016685799 quatern_c : -0.9974202 quatern_d : -0.069515765 qoffset_x : 115.27232 qoffset_y : -97.29564 qoffset_z : -82.373505 srow_x : [-9.3689889e-01 3.2051425e-02 6.3791983e-02 1.1527232e+02] srow_y : [ 3.035889e-02 9.279171e-01 -8.333371e-01 -9.729564e+01] srow_z : [ 1.4317219e-02 1.2980267e-01 5.9415045e+00 -8.2373505e+01] intent_name : b&#39;&#39; magic : b&#39;n+1&#39; (256, 256, 27) . . Writing NIfTI files . Nibabel also provide us with function to save an data into NIfTI format. This is usefull when you want to perform some pre-processing and then later save it back to NIfTI. In below example, we will load a NIfTI image and perform some simple processing and then save it back to &quot;.nii-gz&quot; format. . We will perform simple threasholding using the following code and then plot them. . nifti_from_dicom_data = nifti_from_dicom.get_fdata() new_nifti_data = nifti_from_dicom_data * (nifti_from_dicom_data &gt; 300) . To convert the image data into NIfTI file, we have to use affine array along with new image data. We will use nib.Nifti1Image(new_image_Data, affine_array). We will later save the file using nib.save(nifti_file, path). . processed_nifti = nib.Nifti1Image(new_nifti_data, nifti_from_dicom.affine) nib.save(processed_nifti, &#39;./blog_1_data/201_t2w_tse_processed.nii.gz&#39;) . Congratulations! You made it! Now you understand how to read most popular medical imaging formats(DICOM and NIfTI). By following this notebook you also learned how to manipulate and visualize these images. . References . Nibabel: https://nipy.org/nibabel/coordinate_systems.html | Dataset: https://www.kaggle.com/datasets/awsaf49/brats20-dataset-training-validation | pyDicom: https://pydicom.github.io/ | Dataset: https://www.kaggle.com/kmader/siim-medical-images?select=dicom_dir | . About Me: . I am Akansh maurya, working as a post-bacc at Robert Bosch Center of Data Science and AI, Indian Institute of Technology(IIT), Madras. . Follow @akansh_maurya . Consider joining our Slack channel for discussion, tutorials, talks and, new research in Deep learning and Medical Imaging. .",
            "url": "https://akansh12.github.io/confession-of-a-coding-freak/tutorial/2022/05/07/Reading-Medical-imaging-data-types.html",
            "relUrl": "/tutorial/2022/05/07/Reading-Medical-imaging-data-types.html",
            "date": " • May 7, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://akansh12.github.io/confession-of-a-coding-freak/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Redirecting to https://akansh12.github.io/ ….. .",
          "url": "https://akansh12.github.io/confession-of-a-coding-freak/about-me/",
          "relUrl": "/about-me/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://akansh12.github.io/confession-of-a-coding-freak/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}